var oa =
  typeof globalThis < 'u'
    ? globalThis
    : typeof window < 'u'
    ? window
    : typeof global < 'u'
    ? global
    : typeof self < 'u'
    ? self
    : {};
function Bn(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, 'default') ? e.default : e;
}
function Un(e) {
  const n = e.regex,
    t = e.COMMENT('//', '$', { contains: [{ begin: /\\\n/ }] }),
    a = 'decltype\\(auto\\)',
    s = '[a-zA-Z_]\\w*::',
    r = '(?!struct)(' + a + '|' + n.optional(s) + '[a-zA-Z_]\\w*' + n.optional('<[^<>]+>') + ')',
    i = { className: 'type', begin: '\\b[a-z\\d_]*_t\\b' },
    c = {
      className: 'string',
      variants: [
        { begin: '(u8?|U|L)?"', end: '"', illegal: '\\n', contains: [e.BACKSLASH_ESCAPE] },
        {
          begin: "(u8?|U|L)?'(" + '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)' + '|.)',
          end: "'",
          illegal: '.',
        },
        e.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/,
        }),
      ],
    },
    l = {
      className: 'number',
      variants: [
        { begin: "\\b(0b[01']+)" },
        {
          begin:
            "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)",
        },
        {
          begin:
            "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)",
        },
      ],
      relevance: 0,
    },
    _ = {
      className: 'meta',
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: {
        keyword:
          'if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include',
      },
      contains: [
        { begin: /\\\n/, relevance: 0 },
        e.inherit(c, { className: 'string' }),
        { className: 'string', begin: /<.*?>/ },
        t,
        e.C_BLOCK_COMMENT_MODE,
      ],
    },
    b = { className: 'title', begin: n.optional(s) + e.IDENT_RE, relevance: 0 },
    m = n.optional(s) + e.IDENT_RE + '\\s*\\(',
    h = [
      'alignas',
      'alignof',
      'and',
      'and_eq',
      'asm',
      'atomic_cancel',
      'atomic_commit',
      'atomic_noexcept',
      'auto',
      'bitand',
      'bitor',
      'break',
      'case',
      'catch',
      'class',
      'co_await',
      'co_return',
      'co_yield',
      'compl',
      'concept',
      'const_cast|10',
      'consteval',
      'constexpr',
      'constinit',
      'continue',
      'decltype',
      'default',
      'delete',
      'do',
      'dynamic_cast|10',
      'else',
      'enum',
      'explicit',
      'export',
      'extern',
      'false',
      'final',
      'for',
      'friend',
      'goto',
      'if',
      'import',
      'inline',
      'module',
      'mutable',
      'namespace',
      'new',
      'noexcept',
      'not',
      'not_eq',
      'nullptr',
      'operator',
      'or',
      'or_eq',
      'override',
      'private',
      'protected',
      'public',
      'reflexpr',
      'register',
      'reinterpret_cast|10',
      'requires',
      'return',
      'sizeof',
      'static_assert',
      'static_cast|10',
      'struct',
      'switch',
      'synchronized',
      'template',
      'this',
      'thread_local',
      'throw',
      'transaction_safe',
      'transaction_safe_dynamic',
      'true',
      'try',
      'typedef',
      'typeid',
      'typename',
      'union',
      'using',
      'virtual',
      'volatile',
      'while',
      'xor',
      'xor_eq',
    ],
    y = [
      'bool',
      'char',
      'char16_t',
      'char32_t',
      'char8_t',
      'double',
      'float',
      'int',
      'long',
      'short',
      'void',
      'wchar_t',
      'unsigned',
      'signed',
      'const',
      'static',
    ],
    f = [
      'any',
      'auto_ptr',
      'barrier',
      'binary_semaphore',
      'bitset',
      'complex',
      'condition_variable',
      'condition_variable_any',
      'counting_semaphore',
      'deque',
      'false_type',
      'future',
      'imaginary',
      'initializer_list',
      'istringstream',
      'jthread',
      'latch',
      'lock_guard',
      'multimap',
      'multiset',
      'mutex',
      'optional',
      'ostringstream',
      'packaged_task',
      'pair',
      'promise',
      'priority_queue',
      'queue',
      'recursive_mutex',
      'recursive_timed_mutex',
      'scoped_lock',
      'set',
      'shared_future',
      'shared_lock',
      'shared_mutex',
      'shared_timed_mutex',
      'shared_ptr',
      'stack',
      'string_view',
      'stringstream',
      'timed_mutex',
      'thread',
      'true_type',
      'tuple',
      'unique_lock',
      'unique_ptr',
      'unordered_map',
      'unordered_multimap',
      'unordered_multiset',
      'unordered_set',
      'variant',
      'vector',
      'weak_ptr',
      'wstring',
      'wstring_view',
    ],
    A = [
      'abort',
      'abs',
      'acos',
      'apply',
      'as_const',
      'asin',
      'atan',
      'atan2',
      'calloc',
      'ceil',
      'cerr',
      'cin',
      'clog',
      'cos',
      'cosh',
      'cout',
      'declval',
      'endl',
      'exchange',
      'exit',
      'exp',
      'fabs',
      'floor',
      'fmod',
      'forward',
      'fprintf',
      'fputs',
      'free',
      'frexp',
      'fscanf',
      'future',
      'invoke',
      'isalnum',
      'isalpha',
      'iscntrl',
      'isdigit',
      'isgraph',
      'islower',
      'isprint',
      'ispunct',
      'isspace',
      'isupper',
      'isxdigit',
      'labs',
      'launder',
      'ldexp',
      'log',
      'log10',
      'make_pair',
      'make_shared',
      'make_shared_for_overwrite',
      'make_tuple',
      'make_unique',
      'malloc',
      'memchr',
      'memcmp',
      'memcpy',
      'memset',
      'modf',
      'move',
      'pow',
      'printf',
      'putchar',
      'puts',
      'realloc',
      'scanf',
      'sin',
      'sinh',
      'snprintf',
      'sprintf',
      'sqrt',
      'sscanf',
      'std',
      'stderr',
      'stdin',
      'stdout',
      'strcat',
      'strchr',
      'strcmp',
      'strcpy',
      'strcspn',
      'strlen',
      'strncat',
      'strncmp',
      'strncpy',
      'strpbrk',
      'strrchr',
      'strspn',
      'strstr',
      'swap',
      'tan',
      'tanh',
      'terminate',
      'to_underlying',
      'tolower',
      'toupper',
      'vfprintf',
      'visit',
      'vprintf',
      'vsprintf',
    ],
    S = {
      type: y,
      keyword: h,
      literal: ['NULL', 'false', 'nullopt', 'nullptr', 'true'],
      built_in: ['_Pragma'],
      _type_hints: f,
    },
    x = {
      className: 'function.dispatch',
      relevance: 0,
      keywords: { _hint: A },
      begin: n.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        e.IDENT_RE,
        n.lookahead(/(<[^<>]+>|)\s*\(/),
      ),
    },
    v = [x, _, i, t, e.C_BLOCK_COMMENT_MODE, l, c],
    C = {
      variants: [
        { begin: /=/, end: /;/ },
        { begin: /\(/, end: /\)/ },
        { beginKeywords: 'new throw return else', end: /;/ },
      ],
      keywords: S,
      contains: v.concat([
        { begin: /\(/, end: /\)/, keywords: S, contains: v.concat(['self']), relevance: 0 },
      ]),
      relevance: 0,
    },
    F = {
      className: 'function',
      begin: '(' + r + '[\\*&\\s]+)+' + m,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: S,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        { begin: a, keywords: S, relevance: 0 },
        { begin: m, returnBegin: !0, contains: [b], relevance: 0 },
        { begin: /::/, relevance: 0 },
        { begin: /:/, endsWithParent: !0, contains: [c, l] },
        { relevance: 0, match: /,/ },
        {
          className: 'params',
          begin: /\(/,
          end: /\)/,
          keywords: S,
          relevance: 0,
          contains: [
            t,
            e.C_BLOCK_COMMENT_MODE,
            c,
            l,
            i,
            {
              begin: /\(/,
              end: /\)/,
              keywords: S,
              relevance: 0,
              contains: ['self', t, e.C_BLOCK_COMMENT_MODE, c, l, i],
            },
          ],
        },
        i,
        t,
        e.C_BLOCK_COMMENT_MODE,
        _,
      ],
    };
  return {
    name: 'C++',
    aliases: ['cc', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],
    keywords: S,
    illegal: '</',
    classNameAliases: { 'function.dispatch': 'built_in' },
    contains: [].concat(C, F, x, v, [
      _,
      {
        begin:
          '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
        end: '>',
        keywords: S,
        contains: ['self', i],
      },
      { begin: e.IDENT_RE + '::', keywords: S },
      {
        match: [/\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/, /\s+/, /\w+/],
        className: { 1: 'keyword', 3: 'title.class' },
      },
    ]),
  };
}
function ca(e) {
  const n = {
      type: ['boolean', 'byte', 'word', 'String'],
      built_in: [
        'KeyboardController',
        'MouseController',
        'SoftwareSerial',
        'EthernetServer',
        'EthernetClient',
        'LiquidCrystal',
        'RobotControl',
        'GSMVoiceCall',
        'EthernetUDP',
        'EsploraTFT',
        'HttpClient',
        'RobotMotor',
        'WiFiClient',
        'GSMScanner',
        'FileSystem',
        'Scheduler',
        'GSMServer',
        'YunClient',
        'YunServer',
        'IPAddress',
        'GSMClient',
        'GSMModem',
        'Keyboard',
        'Ethernet',
        'Console',
        'GSMBand',
        'Esplora',
        'Stepper',
        'Process',
        'WiFiUDP',
        'GSM_SMS',
        'Mailbox',
        'USBHost',
        'Firmata',
        'PImage',
        'Client',
        'Server',
        'GSMPIN',
        'FileIO',
        'Bridge',
        'Serial',
        'EEPROM',
        'Stream',
        'Mouse',
        'Audio',
        'Servo',
        'File',
        'Task',
        'GPRS',
        'WiFi',
        'Wire',
        'TFT',
        'GSM',
        'SPI',
        'SD',
      ],
      _hints: [
        'setup',
        'loop',
        'runShellCommandAsynchronously',
        'analogWriteResolution',
        'retrieveCallingNumber',
        'printFirmwareVersion',
        'analogReadResolution',
        'sendDigitalPortPair',
        'noListenOnLocalhost',
        'readJoystickButton',
        'setFirmwareVersion',
        'readJoystickSwitch',
        'scrollDisplayRight',
        'getVoiceCallStatus',
        'scrollDisplayLeft',
        'writeMicroseconds',
        'delayMicroseconds',
        'beginTransmission',
        'getSignalStrength',
        'runAsynchronously',
        'getAsynchronously',
        'listenOnLocalhost',
        'getCurrentCarrier',
        'readAccelerometer',
        'messageAvailable',
        'sendDigitalPorts',
        'lineFollowConfig',
        'countryNameWrite',
        'runShellCommand',
        'readStringUntil',
        'rewindDirectory',
        'readTemperature',
        'setClockDivider',
        'readLightSensor',
        'endTransmission',
        'analogReference',
        'detachInterrupt',
        'countryNameRead',
        'attachInterrupt',
        'encryptionType',
        'readBytesUntil',
        'robotNameWrite',
        'readMicrophone',
        'robotNameRead',
        'cityNameWrite',
        'userNameWrite',
        'readJoystickY',
        'readJoystickX',
        'mouseReleased',
        'openNextFile',
        'scanNetworks',
        'noInterrupts',
        'digitalWrite',
        'beginSpeaker',
        'mousePressed',
        'isActionDone',
        'mouseDragged',
        'displayLogos',
        'noAutoscroll',
        'addParameter',
        'remoteNumber',
        'getModifiers',
        'keyboardRead',
        'userNameRead',
        'waitContinue',
        'processInput',
        'parseCommand',
        'printVersion',
        'readNetworks',
        'writeMessage',
        'blinkVersion',
        'cityNameRead',
        'readMessage',
        'setDataMode',
        'parsePacket',
        'isListening',
        'setBitOrder',
        'beginPacket',
        'isDirectory',
        'motorsWrite',
        'drawCompass',
        'digitalRead',
        'clearScreen',
        'serialEvent',
        'rightToLeft',
        'setTextSize',
        'leftToRight',
        'requestFrom',
        'keyReleased',
        'compassRead',
        'analogWrite',
        'interrupts',
        'WiFiServer',
        'disconnect',
        'playMelody',
        'parseFloat',
        'autoscroll',
        'getPINUsed',
        'setPINUsed',
        'setTimeout',
        'sendAnalog',
        'readSlider',
        'analogRead',
        'beginWrite',
        'createChar',
        'motorsStop',
        'keyPressed',
        'tempoWrite',
        'readButton',
        'subnetMask',
        'debugPrint',
        'macAddress',
        'writeGreen',
        'randomSeed',
        'attachGPRS',
        'readString',
        'sendString',
        'remotePort',
        'releaseAll',
        'mouseMoved',
        'background',
        'getXChange',
        'getYChange',
        'answerCall',
        'getResult',
        'voiceCall',
        'endPacket',
        'constrain',
        'getSocket',
        'writeJSON',
        'getButton',
        'available',
        'connected',
        'findUntil',
        'readBytes',
        'exitValue',
        'readGreen',
        'writeBlue',
        'startLoop',
        'IPAddress',
        'isPressed',
        'sendSysex',
        'pauseMode',
        'gatewayIP',
        'setCursor',
        'getOemKey',
        'tuneWrite',
        'noDisplay',
        'loadImage',
        'switchPIN',
        'onRequest',
        'onReceive',
        'changePIN',
        'playFile',
        'noBuffer',
        'parseInt',
        'overflow',
        'checkPIN',
        'knobRead',
        'beginTFT',
        'bitClear',
        'updateIR',
        'bitWrite',
        'position',
        'writeRGB',
        'highByte',
        'writeRed',
        'setSpeed',
        'readBlue',
        'noStroke',
        'remoteIP',
        'transfer',
        'shutdown',
        'hangCall',
        'beginSMS',
        'endWrite',
        'attached',
        'maintain',
        'noCursor',
        'checkReg',
        'checkPUK',
        'shiftOut',
        'isValid',
        'shiftIn',
        'pulseIn',
        'connect',
        'println',
        'localIP',
        'pinMode',
        'getIMEI',
        'display',
        'noBlink',
        'process',
        'getBand',
        'running',
        'beginSD',
        'drawBMP',
        'lowByte',
        'setBand',
        'release',
        'bitRead',
        'prepare',
        'pointTo',
        'readRed',
        'setMode',
        'noFill',
        'remove',
        'listen',
        'stroke',
        'detach',
        'attach',
        'noTone',
        'exists',
        'buffer',
        'height',
        'bitSet',
        'circle',
        'config',
        'cursor',
        'random',
        'IRread',
        'setDNS',
        'endSMS',
        'getKey',
        'micros',
        'millis',
        'begin',
        'print',
        'write',
        'ready',
        'flush',
        'width',
        'isPIN',
        'blink',
        'clear',
        'press',
        'mkdir',
        'rmdir',
        'close',
        'point',
        'yield',
        'image',
        'BSSID',
        'click',
        'delay',
        'read',
        'text',
        'move',
        'peek',
        'beep',
        'rect',
        'line',
        'open',
        'seek',
        'fill',
        'size',
        'turn',
        'stop',
        'home',
        'find',
        'step',
        'tone',
        'sqrt',
        'RSSI',
        'SSID',
        'end',
        'bit',
        'tan',
        'cos',
        'sin',
        'pow',
        'map',
        'abs',
        'max',
        'min',
        'get',
        'run',
        'put',
      ],
      literal: [
        'DIGITAL_MESSAGE',
        'FIRMATA_STRING',
        'ANALOG_MESSAGE',
        'REPORT_DIGITAL',
        'REPORT_ANALOG',
        'INPUT_PULLUP',
        'SET_PIN_MODE',
        'INTERNAL2V56',
        'SYSTEM_RESET',
        'LED_BUILTIN',
        'INTERNAL1V1',
        'SYSEX_START',
        'INTERNAL',
        'EXTERNAL',
        'DEFAULT',
        'OUTPUT',
        'INPUT',
        'HIGH',
        'LOW',
      ],
    },
    t = Un(e),
    a = t.keywords;
  return (
    (a.type = [...a.type, ...n.type]),
    (a.literal = [...a.literal, ...n.literal]),
    (a.built_in = [...a.built_in, ...n.built_in]),
    (a._hints = n._hints),
    (t.name = 'Arduino'),
    (t.aliases = ['ino']),
    (t.supersetOf = 'cpp'),
    t
  );
}
function la(e) {
  const n = e.regex,
    t = {},
    a = { begin: /\$\{/, end: /\}/, contains: ['self', { begin: /:-/, contains: [t] }] };
  Object.assign(t, {
    className: 'variable',
    variants: [{ begin: n.concat(/\$[\w\d#@][\w\d_]*/, '(?![\\w\\d])(?![$])') }, a],
  });
  const s = { className: 'subst', begin: /\$\(/, end: /\)/, contains: [e.BACKSLASH_ESCAPE] },
    u = {
      begin: /<<-?\s*(?=\w+)/,
      starts: {
        contains: [e.END_SAME_AS_BEGIN({ begin: /(\w+)/, end: /(\w+)/, className: 'string' })],
      },
    },
    r = { className: 'string', begin: /"/, end: /"/, contains: [e.BACKSLASH_ESCAPE, t, s] };
  s.contains.push(r);
  const i = { className: '', begin: /\\"/ },
    o = { className: 'string', begin: /'/, end: /'/ },
    c = {
      begin: /\$?\(\(/,
      end: /\)\)/,
      contains: [{ begin: /\d+#[0-9a-f]+/, className: 'number' }, e.NUMBER_MODE, t],
    },
    l = ['fish', 'bash', 'zsh', 'sh', 'csh', 'ksh', 'tcsh', 'dash', 'scsh'],
    _ = e.SHEBANG({ binary: `(${l.join('|')})`, relevance: 10 }),
    b = {
      className: 'function',
      begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
      returnBegin: !0,
      contains: [e.inherit(e.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
      relevance: 0,
    },
    m = [
      'if',
      'then',
      'else',
      'elif',
      'fi',
      'for',
      'while',
      'until',
      'in',
      'do',
      'done',
      'case',
      'esac',
      'function',
      'select',
    ],
    h = ['true', 'false'],
    y = { match: /(\/[a-z._-]+)+/ },
    f = [
      'break',
      'cd',
      'continue',
      'eval',
      'exec',
      'exit',
      'export',
      'getopts',
      'hash',
      'pwd',
      'readonly',
      'return',
      'shift',
      'test',
      'times',
      'trap',
      'umask',
      'unset',
    ],
    A = [
      'alias',
      'bind',
      'builtin',
      'caller',
      'command',
      'declare',
      'echo',
      'enable',
      'help',
      'let',
      'local',
      'logout',
      'mapfile',
      'printf',
      'read',
      'readarray',
      'source',
      'type',
      'typeset',
      'ulimit',
      'unalias',
    ],
    k = [
      'autoload',
      'bg',
      'bindkey',
      'bye',
      'cap',
      'chdir',
      'clone',
      'comparguments',
      'compcall',
      'compctl',
      'compdescribe',
      'compfiles',
      'compgroups',
      'compquote',
      'comptags',
      'comptry',
      'compvalues',
      'dirs',
      'disable',
      'disown',
      'echotc',
      'echoti',
      'emulate',
      'fc',
      'fg',
      'float',
      'functions',
      'getcap',
      'getln',
      'history',
      'integer',
      'jobs',
      'kill',
      'limit',
      'log',
      'noglob',
      'popd',
      'print',
      'pushd',
      'pushln',
      'rehash',
      'sched',
      'setcap',
      'setopt',
      'stat',
      'suspend',
      'ttyctl',
      'unfunction',
      'unhash',
      'unlimit',
      'unsetopt',
      'vared',
      'wait',
      'whence',
      'where',
      'which',
      'zcompile',
      'zformat',
      'zftp',
      'zle',
      'zmodload',
      'zparseopts',
      'zprof',
      'zpty',
      'zregexparse',
      'zsocket',
      'zstyle',
      'ztcp',
    ],
    R = [
      'chcon',
      'chgrp',
      'chown',
      'chmod',
      'cp',
      'dd',
      'df',
      'dir',
      'dircolors',
      'ln',
      'ls',
      'mkdir',
      'mkfifo',
      'mknod',
      'mktemp',
      'mv',
      'realpath',
      'rm',
      'rmdir',
      'shred',
      'sync',
      'touch',
      'truncate',
      'vdir',
      'b2sum',
      'base32',
      'base64',
      'cat',
      'cksum',
      'comm',
      'csplit',
      'cut',
      'expand',
      'fmt',
      'fold',
      'head',
      'join',
      'md5sum',
      'nl',
      'numfmt',
      'od',
      'paste',
      'ptx',
      'pr',
      'sha1sum',
      'sha224sum',
      'sha256sum',
      'sha384sum',
      'sha512sum',
      'shuf',
      'sort',
      'split',
      'sum',
      'tac',
      'tail',
      'tr',
      'tsort',
      'unexpand',
      'uniq',
      'wc',
      'arch',
      'basename',
      'chroot',
      'date',
      'dirname',
      'du',
      'echo',
      'env',
      'expr',
      'factor',
      'groups',
      'hostid',
      'id',
      'link',
      'logname',
      'nice',
      'nohup',
      'nproc',
      'pathchk',
      'pinky',
      'printenv',
      'printf',
      'pwd',
      'readlink',
      'runcon',
      'seq',
      'sleep',
      'stat',
      'stdbuf',
      'stty',
      'tee',
      'test',
      'timeout',
      'tty',
      'uname',
      'unlink',
      'uptime',
      'users',
      'who',
      'whoami',
      'yes',
    ];
  return {
    name: 'Bash',
    aliases: ['sh'],
    keywords: {
      $pattern: /\b[a-z][a-z0-9._-]+\b/,
      keyword: m,
      literal: h,
      built_in: [...f, ...A, 'set', 'shopt', ...k, ...R],
    },
    contains: [_, e.SHEBANG(), b, c, e.HASH_COMMENT_MODE, u, y, r, i, o, t],
  };
}
function da(e) {
  const n = e.regex,
    t = e.COMMENT('//', '$', { contains: [{ begin: /\\\n/ }] }),
    a = 'decltype\\(auto\\)',
    s = '[a-zA-Z_]\\w*::',
    r = '(' + a + '|' + n.optional(s) + '[a-zA-Z_]\\w*' + n.optional('<[^<>]+>') + ')',
    i = {
      className: 'type',
      variants: [{ begin: '\\b[a-z\\d_]*_t\\b' }, { match: /\batomic_[a-z]{3,6}\b/ }],
    },
    c = {
      className: 'string',
      variants: [
        { begin: '(u8?|U|L)?"', end: '"', illegal: '\\n', contains: [e.BACKSLASH_ESCAPE] },
        {
          begin: "(u8?|U|L)?'(" + '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)' + '|.)',
          end: "'",
          illegal: '.',
        },
        e.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/,
        }),
      ],
    },
    l = {
      className: 'number',
      variants: [
        { begin: "\\b(0b[01']+)" },
        {
          begin:
            "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)",
        },
        {
          begin:
            "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)",
        },
      ],
      relevance: 0,
    },
    _ = {
      className: 'meta',
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: {
        keyword:
          'if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include',
      },
      contains: [
        { begin: /\\\n/, relevance: 0 },
        e.inherit(c, { className: 'string' }),
        { className: 'string', begin: /<.*?>/ },
        t,
        e.C_BLOCK_COMMENT_MODE,
      ],
    },
    b = { className: 'title', begin: n.optional(s) + e.IDENT_RE, relevance: 0 },
    m = n.optional(s) + e.IDENT_RE + '\\s*\\(',
    f = {
      keyword: [
        'asm',
        'auto',
        'break',
        'case',
        'continue',
        'default',
        'do',
        'else',
        'enum',
        'extern',
        'for',
        'fortran',
        'goto',
        'if',
        'inline',
        'register',
        'restrict',
        'return',
        'sizeof',
        'struct',
        'switch',
        'typedef',
        'union',
        'volatile',
        'while',
        '_Alignas',
        '_Alignof',
        '_Atomic',
        '_Generic',
        '_Noreturn',
        '_Static_assert',
        '_Thread_local',
        'alignas',
        'alignof',
        'noreturn',
        'static_assert',
        'thread_local',
        '_Pragma',
      ],
      type: [
        'float',
        'double',
        'signed',
        'unsigned',
        'int',
        'short',
        'long',
        'char',
        'void',
        '_Bool',
        '_Complex',
        '_Imaginary',
        '_Decimal32',
        '_Decimal64',
        '_Decimal128',
        'const',
        'static',
        'complex',
        'bool',
        'imaginary',
      ],
      literal: 'true false NULL',
      built_in:
        'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr',
    },
    A = [_, i, t, e.C_BLOCK_COMMENT_MODE, l, c],
    k = {
      variants: [
        { begin: /=/, end: /;/ },
        { begin: /\(/, end: /\)/ },
        { beginKeywords: 'new throw return else', end: /;/ },
      ],
      keywords: f,
      contains: A.concat([
        { begin: /\(/, end: /\)/, keywords: f, contains: A.concat(['self']), relevance: 0 },
      ]),
      relevance: 0,
    },
    R = {
      begin: '(' + r + '[\\*&\\s]+)+' + m,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: f,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        { begin: a, keywords: f, relevance: 0 },
        {
          begin: m,
          returnBegin: !0,
          contains: [e.inherit(b, { className: 'title.function' })],
          relevance: 0,
        },
        { relevance: 0, match: /,/ },
        {
          className: 'params',
          begin: /\(/,
          end: /\)/,
          keywords: f,
          relevance: 0,
          contains: [
            t,
            e.C_BLOCK_COMMENT_MODE,
            c,
            l,
            i,
            {
              begin: /\(/,
              end: /\)/,
              keywords: f,
              relevance: 0,
              contains: ['self', t, e.C_BLOCK_COMMENT_MODE, c, l, i],
            },
          ],
        },
        i,
        t,
        e.C_BLOCK_COMMENT_MODE,
        _,
      ],
    };
  return {
    name: 'C',
    aliases: ['h'],
    keywords: f,
    disableAutodetect: !0,
    illegal: '</',
    contains: [].concat(k, R, A, [
      _,
      { begin: e.IDENT_RE + '::', keywords: f },
      {
        className: 'class',
        beginKeywords: 'enum class struct union',
        end: /[{;:<>=]/,
        contains: [{ beginKeywords: 'final class struct' }, e.TITLE_MODE],
      },
    ]),
    exports: { preprocessor: _, strings: c, keywords: f },
  };
}
function ua(e) {
  const n = e.regex,
    t = e.COMMENT('//', '$', { contains: [{ begin: /\\\n/ }] }),
    a = 'decltype\\(auto\\)',
    s = '[a-zA-Z_]\\w*::',
    r = '(?!struct)(' + a + '|' + n.optional(s) + '[a-zA-Z_]\\w*' + n.optional('<[^<>]+>') + ')',
    i = { className: 'type', begin: '\\b[a-z\\d_]*_t\\b' },
    c = {
      className: 'string',
      variants: [
        { begin: '(u8?|U|L)?"', end: '"', illegal: '\\n', contains: [e.BACKSLASH_ESCAPE] },
        {
          begin: "(u8?|U|L)?'(" + '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)' + '|.)',
          end: "'",
          illegal: '.',
        },
        e.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/,
        }),
      ],
    },
    l = {
      className: 'number',
      variants: [
        { begin: "\\b(0b[01']+)" },
        {
          begin:
            "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)",
        },
        {
          begin:
            "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)",
        },
      ],
      relevance: 0,
    },
    _ = {
      className: 'meta',
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: {
        keyword:
          'if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include',
      },
      contains: [
        { begin: /\\\n/, relevance: 0 },
        e.inherit(c, { className: 'string' }),
        { className: 'string', begin: /<.*?>/ },
        t,
        e.C_BLOCK_COMMENT_MODE,
      ],
    },
    b = { className: 'title', begin: n.optional(s) + e.IDENT_RE, relevance: 0 },
    m = n.optional(s) + e.IDENT_RE + '\\s*\\(',
    h = [
      'alignas',
      'alignof',
      'and',
      'and_eq',
      'asm',
      'atomic_cancel',
      'atomic_commit',
      'atomic_noexcept',
      'auto',
      'bitand',
      'bitor',
      'break',
      'case',
      'catch',
      'class',
      'co_await',
      'co_return',
      'co_yield',
      'compl',
      'concept',
      'const_cast|10',
      'consteval',
      'constexpr',
      'constinit',
      'continue',
      'decltype',
      'default',
      'delete',
      'do',
      'dynamic_cast|10',
      'else',
      'enum',
      'explicit',
      'export',
      'extern',
      'false',
      'final',
      'for',
      'friend',
      'goto',
      'if',
      'import',
      'inline',
      'module',
      'mutable',
      'namespace',
      'new',
      'noexcept',
      'not',
      'not_eq',
      'nullptr',
      'operator',
      'or',
      'or_eq',
      'override',
      'private',
      'protected',
      'public',
      'reflexpr',
      'register',
      'reinterpret_cast|10',
      'requires',
      'return',
      'sizeof',
      'static_assert',
      'static_cast|10',
      'struct',
      'switch',
      'synchronized',
      'template',
      'this',
      'thread_local',
      'throw',
      'transaction_safe',
      'transaction_safe_dynamic',
      'true',
      'try',
      'typedef',
      'typeid',
      'typename',
      'union',
      'using',
      'virtual',
      'volatile',
      'while',
      'xor',
      'xor_eq',
    ],
    y = [
      'bool',
      'char',
      'char16_t',
      'char32_t',
      'char8_t',
      'double',
      'float',
      'int',
      'long',
      'short',
      'void',
      'wchar_t',
      'unsigned',
      'signed',
      'const',
      'static',
    ],
    f = [
      'any',
      'auto_ptr',
      'barrier',
      'binary_semaphore',
      'bitset',
      'complex',
      'condition_variable',
      'condition_variable_any',
      'counting_semaphore',
      'deque',
      'false_type',
      'future',
      'imaginary',
      'initializer_list',
      'istringstream',
      'jthread',
      'latch',
      'lock_guard',
      'multimap',
      'multiset',
      'mutex',
      'optional',
      'ostringstream',
      'packaged_task',
      'pair',
      'promise',
      'priority_queue',
      'queue',
      'recursive_mutex',
      'recursive_timed_mutex',
      'scoped_lock',
      'set',
      'shared_future',
      'shared_lock',
      'shared_mutex',
      'shared_timed_mutex',
      'shared_ptr',
      'stack',
      'string_view',
      'stringstream',
      'timed_mutex',
      'thread',
      'true_type',
      'tuple',
      'unique_lock',
      'unique_ptr',
      'unordered_map',
      'unordered_multimap',
      'unordered_multiset',
      'unordered_set',
      'variant',
      'vector',
      'weak_ptr',
      'wstring',
      'wstring_view',
    ],
    A = [
      'abort',
      'abs',
      'acos',
      'apply',
      'as_const',
      'asin',
      'atan',
      'atan2',
      'calloc',
      'ceil',
      'cerr',
      'cin',
      'clog',
      'cos',
      'cosh',
      'cout',
      'declval',
      'endl',
      'exchange',
      'exit',
      'exp',
      'fabs',
      'floor',
      'fmod',
      'forward',
      'fprintf',
      'fputs',
      'free',
      'frexp',
      'fscanf',
      'future',
      'invoke',
      'isalnum',
      'isalpha',
      'iscntrl',
      'isdigit',
      'isgraph',
      'islower',
      'isprint',
      'ispunct',
      'isspace',
      'isupper',
      'isxdigit',
      'labs',
      'launder',
      'ldexp',
      'log',
      'log10',
      'make_pair',
      'make_shared',
      'make_shared_for_overwrite',
      'make_tuple',
      'make_unique',
      'malloc',
      'memchr',
      'memcmp',
      'memcpy',
      'memset',
      'modf',
      'move',
      'pow',
      'printf',
      'putchar',
      'puts',
      'realloc',
      'scanf',
      'sin',
      'sinh',
      'snprintf',
      'sprintf',
      'sqrt',
      'sscanf',
      'std',
      'stderr',
      'stdin',
      'stdout',
      'strcat',
      'strchr',
      'strcmp',
      'strcpy',
      'strcspn',
      'strlen',
      'strncat',
      'strncmp',
      'strncpy',
      'strpbrk',
      'strrchr',
      'strspn',
      'strstr',
      'swap',
      'tan',
      'tanh',
      'terminate',
      'to_underlying',
      'tolower',
      'toupper',
      'vfprintf',
      'visit',
      'vprintf',
      'vsprintf',
    ],
    S = {
      type: y,
      keyword: h,
      literal: ['NULL', 'false', 'nullopt', 'nullptr', 'true'],
      built_in: ['_Pragma'],
      _type_hints: f,
    },
    x = {
      className: 'function.dispatch',
      relevance: 0,
      keywords: { _hint: A },
      begin: n.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        e.IDENT_RE,
        n.lookahead(/(<[^<>]+>|)\s*\(/),
      ),
    },
    v = [x, _, i, t, e.C_BLOCK_COMMENT_MODE, l, c],
    C = {
      variants: [
        { begin: /=/, end: /;/ },
        { begin: /\(/, end: /\)/ },
        { beginKeywords: 'new throw return else', end: /;/ },
      ],
      keywords: S,
      contains: v.concat([
        { begin: /\(/, end: /\)/, keywords: S, contains: v.concat(['self']), relevance: 0 },
      ]),
      relevance: 0,
    },
    F = {
      className: 'function',
      begin: '(' + r + '[\\*&\\s]+)+' + m,
      returnBegin: !0,
      end: /[{;=]/,
      excludeEnd: !0,
      keywords: S,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        { begin: a, keywords: S, relevance: 0 },
        { begin: m, returnBegin: !0, contains: [b], relevance: 0 },
        { begin: /::/, relevance: 0 },
        { begin: /:/, endsWithParent: !0, contains: [c, l] },
        { relevance: 0, match: /,/ },
        {
          className: 'params',
          begin: /\(/,
          end: /\)/,
          keywords: S,
          relevance: 0,
          contains: [
            t,
            e.C_BLOCK_COMMENT_MODE,
            c,
            l,
            i,
            {
              begin: /\(/,
              end: /\)/,
              keywords: S,
              relevance: 0,
              contains: ['self', t, e.C_BLOCK_COMMENT_MODE, c, l, i],
            },
          ],
        },
        i,
        t,
        e.C_BLOCK_COMMENT_MODE,
        _,
      ],
    };
  return {
    name: 'C++',
    aliases: ['cc', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],
    keywords: S,
    illegal: '</',
    classNameAliases: { 'function.dispatch': 'built_in' },
    contains: [].concat(C, F, x, v, [
      _,
      {
        begin:
          '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
        end: '>',
        keywords: S,
        contains: ['self', i],
      },
      { begin: e.IDENT_RE + '::', keywords: S },
      {
        match: [/\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/, /\s+/, /\w+/],
        className: { 1: 'keyword', 3: 'title.class' },
      },
    ]),
  };
}
function ga(e) {
  const n = [
      'bool',
      'byte',
      'char',
      'decimal',
      'delegate',
      'double',
      'dynamic',
      'enum',
      'float',
      'int',
      'long',
      'nint',
      'nuint',
      'object',
      'sbyte',
      'short',
      'string',
      'ulong',
      'uint',
      'ushort',
    ],
    t = [
      'public',
      'private',
      'protected',
      'static',
      'internal',
      'protected',
      'abstract',
      'async',
      'extern',
      'override',
      'unsafe',
      'virtual',
      'new',
      'sealed',
      'partial',
    ],
    a = ['default', 'false', 'null', 'true'],
    s = [
      'abstract',
      'as',
      'base',
      'break',
      'case',
      'catch',
      'class',
      'const',
      'continue',
      'do',
      'else',
      'event',
      'explicit',
      'extern',
      'finally',
      'fixed',
      'for',
      'foreach',
      'goto',
      'if',
      'implicit',
      'in',
      'interface',
      'internal',
      'is',
      'lock',
      'namespace',
      'new',
      'operator',
      'out',
      'override',
      'params',
      'private',
      'protected',
      'public',
      'readonly',
      'record',
      'ref',
      'return',
      'scoped',
      'sealed',
      'sizeof',
      'stackalloc',
      'static',
      'struct',
      'switch',
      'this',
      'throw',
      'try',
      'typeof',
      'unchecked',
      'unsafe',
      'using',
      'virtual',
      'void',
      'volatile',
      'while',
    ],
    u = [
      'add',
      'alias',
      'and',
      'ascending',
      'async',
      'await',
      'by',
      'descending',
      'equals',
      'from',
      'get',
      'global',
      'group',
      'init',
      'into',
      'join',
      'let',
      'nameof',
      'not',
      'notnull',
      'on',
      'or',
      'orderby',
      'partial',
      'remove',
      'select',
      'set',
      'unmanaged',
      'value|0',
      'var',
      'when',
      'where',
      'with',
      'yield',
    ],
    r = { keyword: s.concat(u), built_in: n, literal: a },
    i = e.inherit(e.TITLE_MODE, { begin: '[a-zA-Z](\\.?\\w)*' }),
    o = {
      className: 'number',
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
        {
          begin:
            "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)",
        },
      ],
      relevance: 0,
    },
    c = { className: 'string', begin: '@"', end: '"', contains: [{ begin: '""' }] },
    l = e.inherit(c, { illegal: /\n/ }),
    _ = { className: 'subst', begin: /\{/, end: /\}/, keywords: r },
    b = e.inherit(_, { illegal: /\n/ }),
    m = {
      className: 'string',
      begin: /\$"/,
      end: '"',
      illegal: /\n/,
      contains: [{ begin: /\{\{/ }, { begin: /\}\}/ }, e.BACKSLASH_ESCAPE, b],
    },
    h = {
      className: 'string',
      begin: /\$@"/,
      end: '"',
      contains: [{ begin: /\{\{/ }, { begin: /\}\}/ }, { begin: '""' }, _],
    },
    y = e.inherit(h, {
      illegal: /\n/,
      contains: [{ begin: /\{\{/ }, { begin: /\}\}/ }, { begin: '""' }, b],
    });
  (_.contains = [h, m, c, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, o, e.C_BLOCK_COMMENT_MODE]),
    (b.contains = [
      y,
      m,
      l,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      o,
      e.inherit(e.C_BLOCK_COMMENT_MODE, { illegal: /\n/ }),
    ]);
  const f = { variants: [h, m, c, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE] },
    A = { begin: '<', end: '>', contains: [{ beginKeywords: 'in out' }, i] },
    k = e.IDENT_RE + '(<' + e.IDENT_RE + '(\\s*,\\s*' + e.IDENT_RE + ')*>)?(\\[\\])?',
    R = { begin: '@' + e.IDENT_RE, relevance: 0 };
  return {
    name: 'C#',
    aliases: ['cs', 'c#'],
    keywords: r,
    illegal: /::/,
    contains: [
      e.COMMENT('///', '$', {
        returnBegin: !0,
        contains: [
          {
            className: 'doctag',
            variants: [
              { begin: '///', relevance: 0 },
              { begin: '<!--|-->' },
              { begin: '</?', end: '>' },
            ],
          },
        ],
      }),
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      {
        className: 'meta',
        begin: '#',
        end: '$',
        keywords: {
          keyword:
            'if else elif endif define undef warning error line region endregion pragma checksum',
        },
      },
      f,
      o,
      {
        beginKeywords: 'class interface',
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:,]/,
        contains: [
          { beginKeywords: 'where class' },
          i,
          A,
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE,
        ],
      },
      {
        beginKeywords: 'namespace',
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [i, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE],
      },
      {
        beginKeywords: 'record',
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [i, A, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE],
      },
      {
        className: 'meta',
        begin: '^\\s*\\[(?=[\\w])',
        excludeBegin: !0,
        end: '\\]',
        excludeEnd: !0,
        contains: [{ className: 'string', begin: /"/, end: /"/ }],
      },
      { beginKeywords: 'new return throw await else', relevance: 0 },
      {
        className: 'function',
        begin: '(' + k + '\\s+)+' + e.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
        returnBegin: !0,
        end: /\s*[{;=]/,
        excludeEnd: !0,
        keywords: r,
        contains: [
          { beginKeywords: t.join(' '), relevance: 0 },
          {
            begin: e.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
            returnBegin: !0,
            contains: [e.TITLE_MODE, A],
            relevance: 0,
          },
          { match: /\(\)/ },
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: r,
            relevance: 0,
            contains: [f, o, e.C_BLOCK_COMMENT_MODE],
          },
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE,
        ],
      },
      R,
    ],
  };
}
const Pn = (e) => ({
    IMPORTANT: { scope: 'meta', begin: '!important' },
    BLOCK_COMMENT: e.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: { scope: 'number', begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/ },
    FUNCTION_DISPATCH: { className: 'built_in', begin: /[\w-]+(?=\()/ },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: 'selector-attr',
      begin: /\[/,
      end: /\]/,
      illegal: '$',
      contains: [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE],
    },
    CSS_NUMBER_MODE: {
      scope: 'number',
      begin:
        e.NUMBER_RE +
        '(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?',
      relevance: 0,
    },
    CSS_VARIABLE: { className: 'attr', begin: /--[A-Za-z][A-Za-z0-9_-]*/ },
  }),
  Fn = [
    'a',
    'abbr',
    'address',
    'article',
    'aside',
    'audio',
    'b',
    'blockquote',
    'body',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'dd',
    'del',
    'details',
    'dfn',
    'div',
    'dl',
    'dt',
    'em',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hgroup',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'main',
    'mark',
    'menu',
    'nav',
    'object',
    'ol',
    'p',
    'q',
    'quote',
    'samp',
    'section',
    'span',
    'strong',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'tr',
    'ul',
    'var',
    'video',
  ],
  $n = [
    'any-hover',
    'any-pointer',
    'aspect-ratio',
    'color',
    'color-gamut',
    'color-index',
    'device-aspect-ratio',
    'device-height',
    'device-width',
    'display-mode',
    'forced-colors',
    'grid',
    'height',
    'hover',
    'inverted-colors',
    'monochrome',
    'orientation',
    'overflow-block',
    'overflow-inline',
    'pointer',
    'prefers-color-scheme',
    'prefers-contrast',
    'prefers-reduced-motion',
    'prefers-reduced-transparency',
    'resolution',
    'scan',
    'scripting',
    'update',
    'width',
    'min-width',
    'max-width',
    'min-height',
    'max-height',
  ],
  zn = [
    'active',
    'any-link',
    'blank',
    'checked',
    'current',
    'default',
    'defined',
    'dir',
    'disabled',
    'drop',
    'empty',
    'enabled',
    'first',
    'first-child',
    'first-of-type',
    'fullscreen',
    'future',
    'focus',
    'focus-visible',
    'focus-within',
    'has',
    'host',
    'host-context',
    'hover',
    'indeterminate',
    'in-range',
    'invalid',
    'is',
    'lang',
    'last-child',
    'last-of-type',
    'left',
    'link',
    'local-link',
    'not',
    'nth-child',
    'nth-col',
    'nth-last-child',
    'nth-last-col',
    'nth-last-of-type',
    'nth-of-type',
    'only-child',
    'only-of-type',
    'optional',
    'out-of-range',
    'past',
    'placeholder-shown',
    'read-only',
    'read-write',
    'required',
    'right',
    'root',
    'scope',
    'target',
    'target-within',
    'user-invalid',
    'valid',
    'visited',
    'where',
  ],
  Kn = [
    'after',
    'backdrop',
    'before',
    'cue',
    'cue-region',
    'first-letter',
    'first-line',
    'grammar-error',
    'marker',
    'part',
    'placeholder',
    'selection',
    'slotted',
    'spelling-error',
  ],
  Gn = [
    'align-content',
    'align-items',
    'align-self',
    'all',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'backface-visibility',
    'background',
    'background-attachment',
    'background-blend-mode',
    'background-clip',
    'background-color',
    'background-image',
    'background-origin',
    'background-position',
    'background-repeat',
    'background-size',
    'block-size',
    'border',
    'border-block',
    'border-block-color',
    'border-block-end',
    'border-block-end-color',
    'border-block-end-style',
    'border-block-end-width',
    'border-block-start',
    'border-block-start-color',
    'border-block-start-style',
    'border-block-start-width',
    'border-block-style',
    'border-block-width',
    'border-bottom',
    'border-bottom-color',
    'border-bottom-left-radius',
    'border-bottom-right-radius',
    'border-bottom-style',
    'border-bottom-width',
    'border-collapse',
    'border-color',
    'border-image',
    'border-image-outset',
    'border-image-repeat',
    'border-image-slice',
    'border-image-source',
    'border-image-width',
    'border-inline',
    'border-inline-color',
    'border-inline-end',
    'border-inline-end-color',
    'border-inline-end-style',
    'border-inline-end-width',
    'border-inline-start',
    'border-inline-start-color',
    'border-inline-start-style',
    'border-inline-start-width',
    'border-inline-style',
    'border-inline-width',
    'border-left',
    'border-left-color',
    'border-left-style',
    'border-left-width',
    'border-radius',
    'border-right',
    'border-right-color',
    'border-right-style',
    'border-right-width',
    'border-spacing',
    'border-style',
    'border-top',
    'border-top-color',
    'border-top-left-radius',
    'border-top-right-radius',
    'border-top-style',
    'border-top-width',
    'border-width',
    'bottom',
    'box-decoration-break',
    'box-shadow',
    'box-sizing',
    'break-after',
    'break-before',
    'break-inside',
    'caption-side',
    'caret-color',
    'clear',
    'clip',
    'clip-path',
    'clip-rule',
    'color',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'columns',
    'contain',
    'content',
    'content-visibility',
    'counter-increment',
    'counter-reset',
    'cue',
    'cue-after',
    'cue-before',
    'cursor',
    'direction',
    'display',
    'empty-cells',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'float',
    'flow',
    'font',
    'font-display',
    'font-family',
    'font-feature-settings',
    'font-kerning',
    'font-language-override',
    'font-size',
    'font-size-adjust',
    'font-smoothing',
    'font-stretch',
    'font-style',
    'font-synthesis',
    'font-variant',
    'font-variant-caps',
    'font-variant-east-asian',
    'font-variant-ligatures',
    'font-variant-numeric',
    'font-variant-position',
    'font-variation-settings',
    'font-weight',
    'gap',
    'glyph-orientation-vertical',
    'grid',
    'grid-area',
    'grid-auto-columns',
    'grid-auto-flow',
    'grid-auto-rows',
    'grid-column',
    'grid-column-end',
    'grid-column-start',
    'grid-gap',
    'grid-row',
    'grid-row-end',
    'grid-row-start',
    'grid-template',
    'grid-template-areas',
    'grid-template-columns',
    'grid-template-rows',
    'hanging-punctuation',
    'height',
    'hyphens',
    'icon',
    'image-orientation',
    'image-rendering',
    'image-resolution',
    'ime-mode',
    'inline-size',
    'isolation',
    'justify-content',
    'left',
    'letter-spacing',
    'line-break',
    'line-height',
    'list-style',
    'list-style-image',
    'list-style-position',
    'list-style-type',
    'margin',
    'margin-block',
    'margin-block-end',
    'margin-block-start',
    'margin-bottom',
    'margin-inline',
    'margin-inline-end',
    'margin-inline-start',
    'margin-left',
    'margin-right',
    'margin-top',
    'marks',
    'mask',
    'mask-border',
    'mask-border-mode',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-border-slice',
    'mask-border-source',
    'mask-border-width',
    'mask-clip',
    'mask-composite',
    'mask-image',
    'mask-mode',
    'mask-origin',
    'mask-position',
    'mask-repeat',
    'mask-size',
    'mask-type',
    'max-block-size',
    'max-height',
    'max-inline-size',
    'max-width',
    'min-block-size',
    'min-height',
    'min-inline-size',
    'min-width',
    'mix-blend-mode',
    'nav-down',
    'nav-index',
    'nav-left',
    'nav-right',
    'nav-up',
    'none',
    'normal',
    'object-fit',
    'object-position',
    'opacity',
    'order',
    'orphans',
    'outline',
    'outline-color',
    'outline-offset',
    'outline-style',
    'outline-width',
    'overflow',
    'overflow-wrap',
    'overflow-x',
    'overflow-y',
    'padding',
    'padding-block',
    'padding-block-end',
    'padding-block-start',
    'padding-bottom',
    'padding-inline',
    'padding-inline-end',
    'padding-inline-start',
    'padding-left',
    'padding-right',
    'padding-top',
    'page-break-after',
    'page-break-before',
    'page-break-inside',
    'pause',
    'pause-after',
    'pause-before',
    'perspective',
    'perspective-origin',
    'pointer-events',
    'position',
    'quotes',
    'resize',
    'rest',
    'rest-after',
    'rest-before',
    'right',
    'row-gap',
    'scroll-margin',
    'scroll-margin-block',
    'scroll-margin-block-end',
    'scroll-margin-block-start',
    'scroll-margin-bottom',
    'scroll-margin-inline',
    'scroll-margin-inline-end',
    'scroll-margin-inline-start',
    'scroll-margin-left',
    'scroll-margin-right',
    'scroll-margin-top',
    'scroll-padding',
    'scroll-padding-block',
    'scroll-padding-block-end',
    'scroll-padding-block-start',
    'scroll-padding-bottom',
    'scroll-padding-inline',
    'scroll-padding-inline-end',
    'scroll-padding-inline-start',
    'scroll-padding-left',
    'scroll-padding-right',
    'scroll-padding-top',
    'scroll-snap-align',
    'scroll-snap-stop',
    'scroll-snap-type',
    'scrollbar-color',
    'scrollbar-gutter',
    'scrollbar-width',
    'shape-image-threshold',
    'shape-margin',
    'shape-outside',
    'speak',
    'speak-as',
    'src',
    'tab-size',
    'table-layout',
    'text-align',
    'text-align-all',
    'text-align-last',
    'text-combine-upright',
    'text-decoration',
    'text-decoration-color',
    'text-decoration-line',
    'text-decoration-style',
    'text-emphasis',
    'text-emphasis-color',
    'text-emphasis-position',
    'text-emphasis-style',
    'text-indent',
    'text-justify',
    'text-orientation',
    'text-overflow',
    'text-rendering',
    'text-shadow',
    'text-transform',
    'text-underline-position',
    'top',
    'transform',
    'transform-box',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'unicode-bidi',
    'vertical-align',
    'visibility',
    'voice-balance',
    'voice-duration',
    'voice-family',
    'voice-pitch',
    'voice-range',
    'voice-rate',
    'voice-stress',
    'voice-volume',
    'white-space',
    'widows',
    'width',
    'will-change',
    'word-break',
    'word-spacing',
    'word-wrap',
    'writing-mode',
    'z-index',
  ].reverse();
function ba(e) {
  const n = e.regex,
    t = Pn(e),
    a = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ },
    s = 'and or not only',
    u = /@-?\w[\w]*(-\w+)*/,
    r = '[a-zA-Z-][a-zA-Z0-9_-]*',
    i = [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE];
  return {
    name: 'CSS',
    case_insensitive: !0,
    illegal: /[=|'\$]/,
    keywords: { keyframePosition: 'from to' },
    classNameAliases: { keyframePosition: 'selector-tag' },
    contains: [
      t.BLOCK_COMMENT,
      a,
      t.CSS_NUMBER_MODE,
      { className: 'selector-id', begin: /#[A-Za-z0-9_-]+/, relevance: 0 },
      { className: 'selector-class', begin: '\\.' + r, relevance: 0 },
      t.ATTRIBUTE_SELECTOR_MODE,
      {
        className: 'selector-pseudo',
        variants: [{ begin: ':(' + zn.join('|') + ')' }, { begin: ':(:)?(' + Kn.join('|') + ')' }],
      },
      t.CSS_VARIABLE,
      { className: 'attribute', begin: '\\b(' + Gn.join('|') + ')\\b' },
      {
        begin: /:/,
        end: /[;}{]/,
        contains: [
          t.BLOCK_COMMENT,
          t.HEXCOLOR,
          t.IMPORTANT,
          t.CSS_NUMBER_MODE,
          ...i,
          {
            begin: /(url|data-uri)\(/,
            end: /\)/,
            relevance: 0,
            keywords: { built_in: 'url data-uri' },
            contains: [
              ...i,
              { className: 'string', begin: /[^)]/, endsWithParent: !0, excludeEnd: !0 },
            ],
          },
          t.FUNCTION_DISPATCH,
        ],
      },
      {
        begin: n.lookahead(/@/),
        end: '[{;]',
        relevance: 0,
        illegal: /:/,
        contains: [
          { className: 'keyword', begin: u },
          {
            begin: /\s/,
            endsWithParent: !0,
            excludeEnd: !0,
            relevance: 0,
            keywords: { $pattern: /[a-z-]+/, keyword: s, attribute: $n.join(' ') },
            contains: [{ begin: /[a-z-]+(?=:)/, className: 'attribute' }, ...i, t.CSS_NUMBER_MODE],
          },
        ],
      },
      { className: 'selector-tag', begin: '\\b(' + Fn.join('|') + ')\\b' },
    ],
  };
}
function pa(e) {
  const n = e.regex;
  return {
    name: 'Diff',
    aliases: ['patch'],
    contains: [
      {
        className: 'meta',
        relevance: 10,
        match: n.either(
          /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
          /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
          /^--- +\d+,\d+ +----$/,
        ),
      },
      {
        className: 'comment',
        variants: [
          {
            begin: n.either(
              /Index: /,
              /^index/,
              /={3,}/,
              /^-{3}/,
              /^\*{3} /,
              /^\+{3}/,
              /^diff --git/,
            ),
            end: /$/,
          },
          { match: /^\*{15}$/ },
        ],
      },
      { className: 'addition', begin: /^\+/, end: /$/ },
      { className: 'deletion', begin: /^-/, end: /$/ },
      { className: 'addition', begin: /^!/, end: /$/ },
    ],
  };
}
function _a(e) {
  const u = {
    keyword: [
      'break',
      'case',
      'chan',
      'const',
      'continue',
      'default',
      'defer',
      'else',
      'fallthrough',
      'for',
      'func',
      'go',
      'goto',
      'if',
      'import',
      'interface',
      'map',
      'package',
      'range',
      'return',
      'select',
      'struct',
      'switch',
      'type',
      'var',
    ],
    type: [
      'bool',
      'byte',
      'complex64',
      'complex128',
      'error',
      'float32',
      'float64',
      'int8',
      'int16',
      'int32',
      'int64',
      'string',
      'uint8',
      'uint16',
      'uint32',
      'uint64',
      'int',
      'uint',
      'uintptr',
      'rune',
    ],
    literal: ['true', 'false', 'iota', 'nil'],
    built_in: [
      'append',
      'cap',
      'close',
      'complex',
      'copy',
      'imag',
      'len',
      'make',
      'new',
      'panic',
      'print',
      'println',
      'real',
      'recover',
      'delete',
    ],
  };
  return {
    name: 'Go',
    aliases: ['golang'],
    keywords: u,
    illegal: '</',
    contains: [
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      {
        className: 'string',
        variants: [e.QUOTE_STRING_MODE, e.APOS_STRING_MODE, { begin: '`', end: '`' }],
      },
      {
        className: 'number',
        variants: [{ begin: e.C_NUMBER_RE + '[i]', relevance: 1 }, e.C_NUMBER_MODE],
      },
      { begin: /:=/ },
      {
        className: 'function',
        beginKeywords: 'func',
        end: '\\s*(\\{|$)',
        excludeEnd: !0,
        contains: [
          e.TITLE_MODE,
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            endsParent: !0,
            keywords: u,
            illegal: /["']/,
          },
        ],
      },
    ],
  };
}
function ma(e) {
  const n = e.regex,
    t = /[_A-Za-z][_0-9A-Za-z]*/;
  return {
    name: 'GraphQL',
    aliases: ['gql'],
    case_insensitive: !0,
    disableAutodetect: !1,
    keywords: {
      keyword: [
        'query',
        'mutation',
        'subscription',
        'type',
        'input',
        'schema',
        'directive',
        'interface',
        'union',
        'scalar',
        'fragment',
        'enum',
        'on',
      ],
      literal: ['true', 'false', 'null'],
    },
    contains: [
      e.HASH_COMMENT_MODE,
      e.QUOTE_STRING_MODE,
      e.NUMBER_MODE,
      { scope: 'punctuation', match: /[.]{3}/, relevance: 0 },
      { scope: 'punctuation', begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/, relevance: 0 },
      { scope: 'variable', begin: /\$/, end: /\W/, excludeEnd: !0, relevance: 0 },
      { scope: 'meta', match: /@\w+/, excludeEnd: !0 },
      { scope: 'symbol', begin: n.concat(t, n.lookahead(/\s*:/)), relevance: 0 },
    ],
    illegal: [/[;<']/, /BEGIN/],
  };
}
function Ea(e) {
  const n = e.regex,
    t = {
      className: 'number',
      relevance: 0,
      variants: [{ begin: /([+-]+)?[\d]+_[\d_]+/ }, { begin: e.NUMBER_RE }],
    },
    a = e.COMMENT();
  a.variants = [
    { begin: /;/, end: /$/ },
    { begin: /#/, end: /$/ },
  ];
  const s = {
      className: 'variable',
      variants: [{ begin: /\$[\w\d"][\w\d_]*/ }, { begin: /\$\{(.*?)\}/ }],
    },
    u = { className: 'literal', begin: /\bon|off|true|false|yes|no\b/ },
    r = {
      className: 'string',
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        { begin: "'''", end: "'''", relevance: 10 },
        { begin: '"""', end: '"""', relevance: 10 },
        { begin: '"', end: '"' },
        { begin: "'", end: "'" },
      ],
    },
    i = { begin: /\[/, end: /\]/, contains: [a, u, s, r, t, 'self'], relevance: 0 },
    o = /[A-Za-z0-9_-]+/,
    c = /"(\\"|[^"])*"/,
    l = /'[^']*'/,
    _ = n.either(o, c, l),
    b = n.concat(_, '(\\s*\\.\\s*', _, ')*', n.lookahead(/\s*=\s*[^#\s]/));
  return {
    name: 'TOML, also INI',
    aliases: ['toml'],
    case_insensitive: !0,
    illegal: /\S/,
    contains: [
      a,
      { className: 'section', begin: /\[+/, end: /\]+/ },
      { begin: b, className: 'attr', starts: { end: /$/, contains: [a, i, u, s, r, t] } },
    ],
  };
}
var ce = '[0-9](_*[0-9])*',
  Ne = `\\.(${ce})`,
  he = '[0-9a-fA-F](_*[0-9a-fA-F])*',
  He = {
    className: 'number',
    variants: [
      { begin: `(\\b(${ce})((${Ne})|\\.)?|(${Ne}))[eE][+-]?(${ce})[fFdD]?\\b` },
      { begin: `\\b(${ce})((${Ne})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${Ne})[fFdD]?\\b` },
      { begin: `\\b(${ce})[fFdD]\\b` },
      { begin: `\\b0[xX]((${he})\\.?|(${he})?\\.(${he}))[pP][+-]?(${ce})[fFdD]?\\b` },
      { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },
      { begin: `\\b0[xX](${he})[lL]?\\b` },
      { begin: '\\b0(_*[0-7])*[lL]?\\b' },
      { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
    ],
    relevance: 0,
  };
function tn(e, n, t) {
  return t === -1 ? '' : e.replace(n, (a) => tn(e, n, t - 1));
}
function fa(e) {
  const n = e.regex,
    t = '[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*',
    a = t + tn('(?:<' + t + '~~~(?:\\s*,\\s*' + t + '~~~)*>)?', /~~~/g, 2),
    o = {
      keyword: [
        'synchronized',
        'abstract',
        'private',
        'var',
        'static',
        'if',
        'const ',
        'for',
        'while',
        'strictfp',
        'finally',
        'protected',
        'import',
        'native',
        'final',
        'void',
        'enum',
        'else',
        'break',
        'transient',
        'catch',
        'instanceof',
        'volatile',
        'case',
        'assert',
        'package',
        'default',
        'public',
        'try',
        'switch',
        'continue',
        'throws',
        'protected',
        'public',
        'private',
        'module',
        'requires',
        'exports',
        'do',
        'sealed',
        'yield',
        'permits',
      ],
      literal: ['false', 'true', 'null'],
      type: ['char', 'boolean', 'long', 'float', 'int', 'byte', 'short', 'double'],
      built_in: ['super', 'this'],
    },
    c = {
      className: 'meta',
      begin: '@' + t,
      contains: [{ begin: /\(/, end: /\)/, contains: ['self'] }],
    },
    l = {
      className: 'params',
      begin: /\(/,
      end: /\)/,
      keywords: o,
      relevance: 0,
      contains: [e.C_BLOCK_COMMENT_MODE],
      endsParent: !0,
    };
  return {
    name: 'Java',
    aliases: ['jsp'],
    keywords: o,
    illegal: /<\/|#/,
    contains: [
      e.COMMENT('/\\*\\*', '\\*/', {
        relevance: 0,
        contains: [
          { begin: /\w+@/, relevance: 0 },
          { className: 'doctag', begin: '@[A-Za-z]+' },
        ],
      }),
      { begin: /import java\.[a-z]+\./, keywords: 'import', relevance: 2 },
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      { begin: /"""/, end: /"""/, className: 'string', contains: [e.BACKSLASH_ESCAPE] },
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      {
        match: [/\b(?:class|interface|enum|extends|implements|new)/, /\s+/, t],
        className: { 1: 'keyword', 3: 'title.class' },
      },
      { match: /non-sealed/, scope: 'keyword' },
      {
        begin: [n.concat(/(?!else)/, t), /\s+/, t, /\s+/, /=(?!=)/],
        className: { 1: 'type', 3: 'variable', 5: 'operator' },
      },
      {
        begin: [/record/, /\s+/, t],
        className: { 1: 'keyword', 3: 'title.class' },
        contains: [l, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE],
      },
      { beginKeywords: 'new throw return else', relevance: 0 },
      {
        begin: ['(?:' + a + '\\s+)', e.UNDERSCORE_IDENT_RE, /\s*(?=\()/],
        className: { 2: 'title.function' },
        keywords: o,
        contains: [
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            keywords: o,
            relevance: 0,
            contains: [c, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, He, e.C_BLOCK_COMMENT_MODE],
          },
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE,
        ],
      },
      He,
      c,
    ],
  };
}
const qe = '[A-Za-z$_][0-9A-Za-z$_]*',
  Hn = [
    'as',
    'in',
    'of',
    'if',
    'for',
    'while',
    'finally',
    'var',
    'new',
    'function',
    'do',
    'return',
    'void',
    'else',
    'break',
    'catch',
    'instanceof',
    'with',
    'throw',
    'case',
    'default',
    'try',
    'switch',
    'continue',
    'typeof',
    'delete',
    'let',
    'yield',
    'const',
    'class',
    'debugger',
    'async',
    'await',
    'static',
    'import',
    'from',
    'export',
    'extends',
  ],
  qn = ['true', 'false', 'null', 'undefined', 'NaN', 'Infinity'],
  an = [
    'Object',
    'Function',
    'Boolean',
    'Symbol',
    'Math',
    'Date',
    'Number',
    'BigInt',
    'String',
    'RegExp',
    'Array',
    'Float32Array',
    'Float64Array',
    'Int8Array',
    'Uint8Array',
    'Uint8ClampedArray',
    'Int16Array',
    'Int32Array',
    'Uint16Array',
    'Uint32Array',
    'BigInt64Array',
    'BigUint64Array',
    'Set',
    'Map',
    'WeakSet',
    'WeakMap',
    'ArrayBuffer',
    'SharedArrayBuffer',
    'Atomics',
    'DataView',
    'JSON',
    'Promise',
    'Generator',
    'GeneratorFunction',
    'AsyncFunction',
    'Reflect',
    'Proxy',
    'Intl',
    'WebAssembly',
  ],
  rn = [
    'Error',
    'EvalError',
    'InternalError',
    'RangeError',
    'ReferenceError',
    'SyntaxError',
    'TypeError',
    'URIError',
  ],
  sn = [
    'setInterval',
    'setTimeout',
    'clearInterval',
    'clearTimeout',
    'require',
    'exports',
    'eval',
    'isFinite',
    'isNaN',
    'parseFloat',
    'parseInt',
    'decodeURI',
    'decodeURIComponent',
    'encodeURI',
    'encodeURIComponent',
    'escape',
    'unescape',
  ],
  Wn = [
    'arguments',
    'this',
    'super',
    'console',
    'window',
    'document',
    'localStorage',
    'sessionStorage',
    'module',
    'global',
  ],
  Yn = [].concat(sn, an, rn);
function Na(e) {
  const n = e.regex,
    t = (g, { after: N }) => {
      const w = '</' + g[0].slice(1);
      return g.input.indexOf(w, N) !== -1;
    },
    a = qe,
    s = { begin: '<>', end: '</>' },
    u = /<[A-Za-z0-9\\._:-]+\s*\/>/,
    r = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      isTrulyOpeningTag: (g, N) => {
        const w = g[0].length + g.index,
          M = g.input[w];
        if (M === '<' || M === ',') {
          N.ignoreMatch();
          return;
        }
        M === '>' && (t(g, { after: w }) || N.ignoreMatch());
        let P;
        const H = g.input.substring(w);
        if ((P = H.match(/^\s*=/))) {
          N.ignoreMatch();
          return;
        }
        if ((P = H.match(/^\s+extends\s+/)) && P.index === 0) {
          N.ignoreMatch();
          return;
        }
      },
    },
    i = { $pattern: qe, keyword: Hn, literal: qn, built_in: Yn, 'variable.language': Wn },
    o = '[0-9](_?[0-9])*',
    c = `\\.(${o})`,
    l = '0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*',
    _ = {
      className: 'number',
      variants: [
        { begin: `(\\b(${l})((${c})|\\.)?|(${c}))[eE][+-]?(${o})\\b` },
        { begin: `\\b(${l})\\b((${c})\\b|\\.)?|(${c})\\b` },
        { begin: '\\b(0|[1-9](_?[0-9])*)n\\b' },
        { begin: '\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b' },
        { begin: '\\b0[bB][0-1](_?[0-1])*n?\\b' },
        { begin: '\\b0[oO][0-7](_?[0-7])*n?\\b' },
        { begin: '\\b0[0-7]+n?\\b' },
      ],
      relevance: 0,
    },
    b = { className: 'subst', begin: '\\$\\{', end: '\\}', keywords: i, contains: [] },
    m = {
      begin: 'html`',
      end: '',
      starts: { end: '`', returnEnd: !1, contains: [e.BACKSLASH_ESCAPE, b], subLanguage: 'xml' },
    },
    h = {
      begin: 'css`',
      end: '',
      starts: { end: '`', returnEnd: !1, contains: [e.BACKSLASH_ESCAPE, b], subLanguage: 'css' },
    },
    y = {
      begin: 'gql`',
      end: '',
      starts: {
        end: '`',
        returnEnd: !1,
        contains: [e.BACKSLASH_ESCAPE, b],
        subLanguage: 'graphql',
      },
    },
    f = { className: 'string', begin: '`', end: '`', contains: [e.BACKSLASH_ESCAPE, b] },
    k = {
      className: 'comment',
      variants: [
        e.COMMENT(/\/\*\*(?!\/)/, '\\*/', {
          relevance: 0,
          contains: [
            {
              begin: '(?=@[A-Za-z]+)',
              relevance: 0,
              contains: [
                { className: 'doctag', begin: '@[A-Za-z]+' },
                {
                  className: 'type',
                  begin: '\\{',
                  end: '\\}',
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0,
                },
                { className: 'variable', begin: a + '(?=\\s*(-)|$)', endsParent: !0, relevance: 0 },
                { begin: /(?=[^\n])\s/, relevance: 0 },
              ],
            },
          ],
        }),
        e.C_BLOCK_COMMENT_MODE,
        e.C_LINE_COMMENT_MODE,
      ],
    },
    R = [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, m, h, y, f, { match: /\$\d+/ }, _];
  b.contains = R.concat({ begin: /\{/, end: /\}/, keywords: i, contains: ['self'].concat(R) });
  const S = [].concat(k, b.contains),
    x = S.concat([{ begin: /\(/, end: /\)/, keywords: i, contains: ['self'].concat(S) }]),
    v = {
      className: 'params',
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      keywords: i,
      contains: x,
    },
    C = {
      variants: [
        {
          match: [
            /class/,
            /\s+/,
            a,
            /\s+/,
            /extends/,
            /\s+/,
            n.concat(a, '(', n.concat(/\./, a), ')*'),
          ],
          scope: { 1: 'keyword', 3: 'title.class', 5: 'keyword', 7: 'title.class.inherited' },
        },
        { match: [/class/, /\s+/, a], scope: { 1: 'keyword', 3: 'title.class' } },
      ],
    },
    F = {
      relevance: 0,
      match: n.either(
        /\bJSON/,
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
      ),
      className: 'title.class',
      keywords: { _: [...an, ...rn] },
    },
    U = {
      label: 'use_strict',
      className: 'meta',
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/,
    },
    Y = {
      variants: [
        { match: [/function/, /\s+/, a, /(?=\s*\()/] },
        { match: [/function/, /\s*(?=\()/] },
      ],
      className: { 1: 'keyword', 3: 'title.function' },
      label: 'func.def',
      contains: [v],
      illegal: /%/,
    },
    X = { relevance: 0, match: /\b[A-Z][A-Z_0-9]+\b/, className: 'variable.constant' };
  function J(g) {
    return n.concat('(?!', g.join('|'), ')');
  }
  const z = {
      match: n.concat(/\b/, J([...sn, 'super', 'import']), a, n.lookahead(/\(/)),
      className: 'title.function',
      relevance: 0,
    },
    $ = {
      begin: n.concat(/\./, n.lookahead(n.concat(a, /(?![0-9A-Za-z$_(])/))),
      end: a,
      excludeBegin: !0,
      keywords: 'prototype',
      className: 'property',
      relevance: 0,
    },
    G = {
      match: [/get|set/, /\s+/, a, /(?=\()/],
      className: { 1: 'keyword', 3: 'title.function' },
      contains: [{ begin: /\(\)/ }, v],
    },
    j =
      '(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|' +
      e.UNDERSCORE_IDENT_RE +
      ')\\s*=>',
    d = {
      match: [/const|var|let/, /\s+/, a, /\s*/, /=\s*/, /(async\s*)?/, n.lookahead(j)],
      keywords: 'async',
      className: { 1: 'keyword', 3: 'title.function' },
      contains: [v],
    };
  return {
    name: 'JavaScript',
    aliases: ['js', 'jsx', 'mjs', 'cjs'],
    keywords: i,
    exports: { PARAMS_CONTAINS: x, CLASS_REFERENCE: F },
    illegal: /#(?![$_A-z])/,
    contains: [
      e.SHEBANG({ label: 'shebang', binary: 'node', relevance: 5 }),
      U,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      m,
      h,
      y,
      f,
      k,
      { match: /\$\d+/ },
      _,
      F,
      { className: 'attr', begin: a + n.lookahead(':'), relevance: 0 },
      d,
      {
        begin: '(' + e.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
        keywords: 'return throw case',
        relevance: 0,
        contains: [
          k,
          e.REGEXP_MODE,
          {
            className: 'function',
            begin: j,
            returnBegin: !0,
            end: '\\s*=>',
            contains: [
              {
                className: 'params',
                variants: [
                  { begin: e.UNDERSCORE_IDENT_RE, relevance: 0 },
                  { className: null, begin: /\(\s*\)/, skip: !0 },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: i,
                    contains: x,
                  },
                ],
              },
            ],
          },
          { begin: /,/, relevance: 0 },
          { match: /\s+/, relevance: 0 },
          {
            variants: [
              { begin: s.begin, end: s.end },
              { match: u },
              { begin: r.begin, 'on:begin': r.isTrulyOpeningTag, end: r.end },
            ],
            subLanguage: 'xml',
            contains: [{ begin: r.begin, end: r.end, skip: !0, contains: ['self'] }],
          },
        ],
      },
      Y,
      { beginKeywords: 'while if switch catch for' },
      {
        begin:
          '\\b(?!function)' +
          e.UNDERSCORE_IDENT_RE +
          '\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{',
        returnBegin: !0,
        label: 'func.def',
        contains: [v, e.inherit(e.TITLE_MODE, { begin: a, className: 'title.function' })],
      },
      { match: /\.\.\./, relevance: 0 },
      $,
      { match: '\\$' + a, relevance: 0 },
      { match: [/\bconstructor(?=\s*\()/], className: { 1: 'title.function' }, contains: [v] },
      z,
      X,
      C,
      G,
      { match: /\$[(.]/ },
    ],
  };
}
function ha(e) {
  const n = { className: 'attr', begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/, relevance: 1.01 },
    t = { match: /[{}[\],:]/, className: 'punctuation', relevance: 0 },
    a = ['true', 'false', 'null'],
    s = { scope: 'literal', beginKeywords: a.join(' ') };
  return {
    name: 'JSON',
    keywords: { literal: a },
    contains: [
      n,
      t,
      e.QUOTE_STRING_MODE,
      s,
      e.C_NUMBER_MODE,
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
    ],
    illegal: '\\S',
  };
}
var le = '[0-9](_*[0-9])*',
  ye = `\\.(${le})`,
  Se = '[0-9a-fA-F](_*[0-9a-fA-F])*',
  Zn = {
    className: 'number',
    variants: [
      { begin: `(\\b(${le})((${ye})|\\.)?|(${ye}))[eE][+-]?(${le})[fFdD]?\\b` },
      { begin: `\\b(${le})((${ye})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${ye})[fFdD]?\\b` },
      { begin: `\\b(${le})[fFdD]\\b` },
      { begin: `\\b0[xX]((${Se})\\.?|(${Se})?\\.(${Se}))[pP][+-]?(${le})[fFdD]?\\b` },
      { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },
      { begin: `\\b0[xX](${Se})[lL]?\\b` },
      { begin: '\\b0(_*[0-7])*[lL]?\\b' },
      { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
    ],
    relevance: 0,
  };
function ya(e) {
  const n = {
      keyword:
        'abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual',
      built_in: 'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
      literal: 'true false null',
    },
    t = {
      className: 'keyword',
      begin: /\b(break|continue|return|this)\b/,
      starts: { contains: [{ className: 'symbol', begin: /@\w+/ }] },
    },
    a = { className: 'symbol', begin: e.UNDERSCORE_IDENT_RE + '@' },
    s = { className: 'subst', begin: /\$\{/, end: /\}/, contains: [e.C_NUMBER_MODE] },
    u = { className: 'variable', begin: '\\$' + e.UNDERSCORE_IDENT_RE },
    r = {
      className: 'string',
      variants: [
        { begin: '"""', end: '"""(?=[^"])', contains: [u, s] },
        { begin: "'", end: "'", illegal: /\n/, contains: [e.BACKSLASH_ESCAPE] },
        { begin: '"', end: '"', illegal: /\n/, contains: [e.BACKSLASH_ESCAPE, u, s] },
      ],
    };
  s.contains.push(r);
  const i = {
      className: 'meta',
      begin:
        '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' +
        e.UNDERSCORE_IDENT_RE +
        ')?',
    },
    o = {
      className: 'meta',
      begin: '@' + e.UNDERSCORE_IDENT_RE,
      contains: [
        { begin: /\(/, end: /\)/, contains: [e.inherit(r, { className: 'string' }), 'self'] },
      ],
    },
    c = Zn,
    l = e.COMMENT('/\\*', '\\*/', { contains: [e.C_BLOCK_COMMENT_MODE] }),
    _ = {
      variants: [
        { className: 'type', begin: e.UNDERSCORE_IDENT_RE },
        { begin: /\(/, end: /\)/, contains: [] },
      ],
    },
    b = _;
  return (
    (b.variants[1].contains = [_]),
    (_.variants[1].contains = [b]),
    {
      name: 'Kotlin',
      aliases: ['kt', 'kts'],
      keywords: n,
      contains: [
        e.COMMENT('/\\*\\*', '\\*/', {
          relevance: 0,
          contains: [{ className: 'doctag', begin: '@[A-Za-z]+' }],
        }),
        e.C_LINE_COMMENT_MODE,
        l,
        t,
        a,
        i,
        o,
        {
          className: 'function',
          beginKeywords: 'fun',
          end: '[(]|$',
          returnBegin: !0,
          excludeEnd: !0,
          keywords: n,
          relevance: 5,
          contains: [
            {
              begin: e.UNDERSCORE_IDENT_RE + '\\s*\\(',
              returnBegin: !0,
              relevance: 0,
              contains: [e.UNDERSCORE_TITLE_MODE],
            },
            { className: 'type', begin: /</, end: />/, keywords: 'reified', relevance: 0 },
            {
              className: 'params',
              begin: /\(/,
              end: /\)/,
              endsParent: !0,
              keywords: n,
              relevance: 0,
              contains: [
                {
                  begin: /:/,
                  end: /[=,\/]/,
                  endsWithParent: !0,
                  contains: [_, e.C_LINE_COMMENT_MODE, l],
                  relevance: 0,
                },
                e.C_LINE_COMMENT_MODE,
                l,
                i,
                o,
                r,
                e.C_NUMBER_MODE,
              ],
            },
            l,
          ],
        },
        {
          begin: [/class|interface|trait/, /\s+/, e.UNDERSCORE_IDENT_RE],
          beginScope: { 3: 'title.class' },
          keywords: 'class interface trait',
          end: /[:\{(]|$/,
          excludeEnd: !0,
          illegal: 'extends implements',
          contains: [
            { beginKeywords: 'public protected internal private constructor' },
            e.UNDERSCORE_TITLE_MODE,
            {
              className: 'type',
              begin: /</,
              end: />/,
              excludeBegin: !0,
              excludeEnd: !0,
              relevance: 0,
            },
            {
              className: 'type',
              begin: /[,:]\s*/,
              end: /[<\(,){\s]|$/,
              excludeBegin: !0,
              returnEnd: !0,
            },
            i,
            o,
          ],
        },
        r,
        {
          className: 'meta',
          begin: '^#!/usr/bin/env',
          end: '$',
          illegal: `
`,
        },
        c,
      ],
    }
  );
}
const Vn = (e) => ({
    IMPORTANT: { scope: 'meta', begin: '!important' },
    BLOCK_COMMENT: e.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: { scope: 'number', begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/ },
    FUNCTION_DISPATCH: { className: 'built_in', begin: /[\w-]+(?=\()/ },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: 'selector-attr',
      begin: /\[/,
      end: /\]/,
      illegal: '$',
      contains: [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE],
    },
    CSS_NUMBER_MODE: {
      scope: 'number',
      begin:
        e.NUMBER_RE +
        '(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?',
      relevance: 0,
    },
    CSS_VARIABLE: { className: 'attr', begin: /--[A-Za-z][A-Za-z0-9_-]*/ },
  }),
  Xn = [
    'a',
    'abbr',
    'address',
    'article',
    'aside',
    'audio',
    'b',
    'blockquote',
    'body',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'dd',
    'del',
    'details',
    'dfn',
    'div',
    'dl',
    'dt',
    'em',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hgroup',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'main',
    'mark',
    'menu',
    'nav',
    'object',
    'ol',
    'p',
    'q',
    'quote',
    'samp',
    'section',
    'span',
    'strong',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'tr',
    'ul',
    'var',
    'video',
  ],
  Qn = [
    'any-hover',
    'any-pointer',
    'aspect-ratio',
    'color',
    'color-gamut',
    'color-index',
    'device-aspect-ratio',
    'device-height',
    'device-width',
    'display-mode',
    'forced-colors',
    'grid',
    'height',
    'hover',
    'inverted-colors',
    'monochrome',
    'orientation',
    'overflow-block',
    'overflow-inline',
    'pointer',
    'prefers-color-scheme',
    'prefers-contrast',
    'prefers-reduced-motion',
    'prefers-reduced-transparency',
    'resolution',
    'scan',
    'scripting',
    'update',
    'width',
    'min-width',
    'max-width',
    'min-height',
    'max-height',
  ],
  on = [
    'active',
    'any-link',
    'blank',
    'checked',
    'current',
    'default',
    'defined',
    'dir',
    'disabled',
    'drop',
    'empty',
    'enabled',
    'first',
    'first-child',
    'first-of-type',
    'fullscreen',
    'future',
    'focus',
    'focus-visible',
    'focus-within',
    'has',
    'host',
    'host-context',
    'hover',
    'indeterminate',
    'in-range',
    'invalid',
    'is',
    'lang',
    'last-child',
    'last-of-type',
    'left',
    'link',
    'local-link',
    'not',
    'nth-child',
    'nth-col',
    'nth-last-child',
    'nth-last-col',
    'nth-last-of-type',
    'nth-of-type',
    'only-child',
    'only-of-type',
    'optional',
    'out-of-range',
    'past',
    'placeholder-shown',
    'read-only',
    'read-write',
    'required',
    'right',
    'root',
    'scope',
    'target',
    'target-within',
    'user-invalid',
    'valid',
    'visited',
    'where',
  ],
  cn = [
    'after',
    'backdrop',
    'before',
    'cue',
    'cue-region',
    'first-letter',
    'first-line',
    'grammar-error',
    'marker',
    'part',
    'placeholder',
    'selection',
    'slotted',
    'spelling-error',
  ],
  Jn = [
    'align-content',
    'align-items',
    'align-self',
    'all',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'backface-visibility',
    'background',
    'background-attachment',
    'background-blend-mode',
    'background-clip',
    'background-color',
    'background-image',
    'background-origin',
    'background-position',
    'background-repeat',
    'background-size',
    'block-size',
    'border',
    'border-block',
    'border-block-color',
    'border-block-end',
    'border-block-end-color',
    'border-block-end-style',
    'border-block-end-width',
    'border-block-start',
    'border-block-start-color',
    'border-block-start-style',
    'border-block-start-width',
    'border-block-style',
    'border-block-width',
    'border-bottom',
    'border-bottom-color',
    'border-bottom-left-radius',
    'border-bottom-right-radius',
    'border-bottom-style',
    'border-bottom-width',
    'border-collapse',
    'border-color',
    'border-image',
    'border-image-outset',
    'border-image-repeat',
    'border-image-slice',
    'border-image-source',
    'border-image-width',
    'border-inline',
    'border-inline-color',
    'border-inline-end',
    'border-inline-end-color',
    'border-inline-end-style',
    'border-inline-end-width',
    'border-inline-start',
    'border-inline-start-color',
    'border-inline-start-style',
    'border-inline-start-width',
    'border-inline-style',
    'border-inline-width',
    'border-left',
    'border-left-color',
    'border-left-style',
    'border-left-width',
    'border-radius',
    'border-right',
    'border-right-color',
    'border-right-style',
    'border-right-width',
    'border-spacing',
    'border-style',
    'border-top',
    'border-top-color',
    'border-top-left-radius',
    'border-top-right-radius',
    'border-top-style',
    'border-top-width',
    'border-width',
    'bottom',
    'box-decoration-break',
    'box-shadow',
    'box-sizing',
    'break-after',
    'break-before',
    'break-inside',
    'caption-side',
    'caret-color',
    'clear',
    'clip',
    'clip-path',
    'clip-rule',
    'color',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'columns',
    'contain',
    'content',
    'content-visibility',
    'counter-increment',
    'counter-reset',
    'cue',
    'cue-after',
    'cue-before',
    'cursor',
    'direction',
    'display',
    'empty-cells',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'float',
    'flow',
    'font',
    'font-display',
    'font-family',
    'font-feature-settings',
    'font-kerning',
    'font-language-override',
    'font-size',
    'font-size-adjust',
    'font-smoothing',
    'font-stretch',
    'font-style',
    'font-synthesis',
    'font-variant',
    'font-variant-caps',
    'font-variant-east-asian',
    'font-variant-ligatures',
    'font-variant-numeric',
    'font-variant-position',
    'font-variation-settings',
    'font-weight',
    'gap',
    'glyph-orientation-vertical',
    'grid',
    'grid-area',
    'grid-auto-columns',
    'grid-auto-flow',
    'grid-auto-rows',
    'grid-column',
    'grid-column-end',
    'grid-column-start',
    'grid-gap',
    'grid-row',
    'grid-row-end',
    'grid-row-start',
    'grid-template',
    'grid-template-areas',
    'grid-template-columns',
    'grid-template-rows',
    'hanging-punctuation',
    'height',
    'hyphens',
    'icon',
    'image-orientation',
    'image-rendering',
    'image-resolution',
    'ime-mode',
    'inline-size',
    'isolation',
    'justify-content',
    'left',
    'letter-spacing',
    'line-break',
    'line-height',
    'list-style',
    'list-style-image',
    'list-style-position',
    'list-style-type',
    'margin',
    'margin-block',
    'margin-block-end',
    'margin-block-start',
    'margin-bottom',
    'margin-inline',
    'margin-inline-end',
    'margin-inline-start',
    'margin-left',
    'margin-right',
    'margin-top',
    'marks',
    'mask',
    'mask-border',
    'mask-border-mode',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-border-slice',
    'mask-border-source',
    'mask-border-width',
    'mask-clip',
    'mask-composite',
    'mask-image',
    'mask-mode',
    'mask-origin',
    'mask-position',
    'mask-repeat',
    'mask-size',
    'mask-type',
    'max-block-size',
    'max-height',
    'max-inline-size',
    'max-width',
    'min-block-size',
    'min-height',
    'min-inline-size',
    'min-width',
    'mix-blend-mode',
    'nav-down',
    'nav-index',
    'nav-left',
    'nav-right',
    'nav-up',
    'none',
    'normal',
    'object-fit',
    'object-position',
    'opacity',
    'order',
    'orphans',
    'outline',
    'outline-color',
    'outline-offset',
    'outline-style',
    'outline-width',
    'overflow',
    'overflow-wrap',
    'overflow-x',
    'overflow-y',
    'padding',
    'padding-block',
    'padding-block-end',
    'padding-block-start',
    'padding-bottom',
    'padding-inline',
    'padding-inline-end',
    'padding-inline-start',
    'padding-left',
    'padding-right',
    'padding-top',
    'page-break-after',
    'page-break-before',
    'page-break-inside',
    'pause',
    'pause-after',
    'pause-before',
    'perspective',
    'perspective-origin',
    'pointer-events',
    'position',
    'quotes',
    'resize',
    'rest',
    'rest-after',
    'rest-before',
    'right',
    'row-gap',
    'scroll-margin',
    'scroll-margin-block',
    'scroll-margin-block-end',
    'scroll-margin-block-start',
    'scroll-margin-bottom',
    'scroll-margin-inline',
    'scroll-margin-inline-end',
    'scroll-margin-inline-start',
    'scroll-margin-left',
    'scroll-margin-right',
    'scroll-margin-top',
    'scroll-padding',
    'scroll-padding-block',
    'scroll-padding-block-end',
    'scroll-padding-block-start',
    'scroll-padding-bottom',
    'scroll-padding-inline',
    'scroll-padding-inline-end',
    'scroll-padding-inline-start',
    'scroll-padding-left',
    'scroll-padding-right',
    'scroll-padding-top',
    'scroll-snap-align',
    'scroll-snap-stop',
    'scroll-snap-type',
    'scrollbar-color',
    'scrollbar-gutter',
    'scrollbar-width',
    'shape-image-threshold',
    'shape-margin',
    'shape-outside',
    'speak',
    'speak-as',
    'src',
    'tab-size',
    'table-layout',
    'text-align',
    'text-align-all',
    'text-align-last',
    'text-combine-upright',
    'text-decoration',
    'text-decoration-color',
    'text-decoration-line',
    'text-decoration-style',
    'text-emphasis',
    'text-emphasis-color',
    'text-emphasis-position',
    'text-emphasis-style',
    'text-indent',
    'text-justify',
    'text-orientation',
    'text-overflow',
    'text-rendering',
    'text-shadow',
    'text-transform',
    'text-underline-position',
    'top',
    'transform',
    'transform-box',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'unicode-bidi',
    'vertical-align',
    'visibility',
    'voice-balance',
    'voice-duration',
    'voice-family',
    'voice-pitch',
    'voice-range',
    'voice-rate',
    'voice-stress',
    'voice-volume',
    'white-space',
    'widows',
    'width',
    'will-change',
    'word-break',
    'word-spacing',
    'word-wrap',
    'writing-mode',
    'z-index',
  ].reverse(),
  jn = on.concat(cn);
function Sa(e) {
  const n = Vn(e),
    t = jn,
    a = 'and or not only',
    s = '[\\w-]+',
    u = '(' + s + '|@\\{' + s + '\\})',
    r = [],
    i = [],
    o = function (R) {
      return { className: 'string', begin: '~?' + R + '.*?' + R };
    },
    c = function (R, S, x) {
      return { className: R, begin: S, relevance: x };
    },
    l = { $pattern: /[a-z-]+/, keyword: a, attribute: Qn.join(' ') },
    _ = { begin: '\\(', end: '\\)', contains: i, keywords: l, relevance: 0 };
  i.push(
    e.C_LINE_COMMENT_MODE,
    e.C_BLOCK_COMMENT_MODE,
    o("'"),
    o('"'),
    n.CSS_NUMBER_MODE,
    {
      begin: '(url|data-uri)\\(',
      starts: { className: 'string', end: '[\\)\\n]', excludeEnd: !0 },
    },
    n.HEXCOLOR,
    _,
    c('variable', '@@?' + s, 10),
    c('variable', '@\\{' + s + '\\}'),
    c('built_in', '~?`[^`]*?`'),
    { className: 'attribute', begin: s + '\\s*:', end: ':', returnBegin: !0, excludeEnd: !0 },
    n.IMPORTANT,
    { beginKeywords: 'and not' },
    n.FUNCTION_DISPATCH,
  );
  const b = i.concat({ begin: /\{/, end: /\}/, contains: r }),
    m = {
      beginKeywords: 'when',
      endsWithParent: !0,
      contains: [{ beginKeywords: 'and not' }].concat(i),
    },
    h = {
      begin: u + '\\s*:',
      returnBegin: !0,
      end: /[;}]/,
      relevance: 0,
      contains: [
        { begin: /-(webkit|moz|ms|o)-/ },
        n.CSS_VARIABLE,
        {
          className: 'attribute',
          begin: '\\b(' + Jn.join('|') + ')\\b',
          end: /(?=:)/,
          starts: { endsWithParent: !0, illegal: '[<=$]', relevance: 0, contains: i },
        },
      ],
    },
    y = {
      className: 'keyword',
      begin:
        '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
      starts: { end: '[;{}]', keywords: l, returnEnd: !0, contains: i, relevance: 0 },
    },
    f = {
      className: 'variable',
      variants: [{ begin: '@' + s + '\\s*:', relevance: 15 }, { begin: '@' + s }],
      starts: { end: '[;}]', returnEnd: !0, contains: b },
    },
    A = {
      variants: [
        { begin: '[\\.#:&\\[>]', end: '[;{}]' },
        { begin: u, end: /\{/ },
      ],
      returnBegin: !0,
      returnEnd: !0,
      illegal: `[<='$"]`,
      relevance: 0,
      contains: [
        e.C_LINE_COMMENT_MODE,
        e.C_BLOCK_COMMENT_MODE,
        m,
        c('keyword', 'all\\b'),
        c('variable', '@\\{' + s + '\\}'),
        { begin: '\\b(' + Xn.join('|') + ')\\b', className: 'selector-tag' },
        n.CSS_NUMBER_MODE,
        c('selector-tag', u, 0),
        c('selector-id', '#' + u),
        c('selector-class', '\\.' + u, 0),
        c('selector-tag', '&', 0),
        n.ATTRIBUTE_SELECTOR_MODE,
        { className: 'selector-pseudo', begin: ':(' + on.join('|') + ')' },
        { className: 'selector-pseudo', begin: ':(:)?(' + cn.join('|') + ')' },
        { begin: /\(/, end: /\)/, relevance: 0, contains: b },
        { begin: '!important' },
        n.FUNCTION_DISPATCH,
      ],
    },
    k = { begin: s + `:(:)?(${t.join('|')})`, returnBegin: !0, contains: [A] };
  return (
    r.push(e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, y, f, k, h, A, m, n.FUNCTION_DISPATCH),
    { name: 'Less', case_insensitive: !0, illegal: `[=>'/<($"]`, contains: r }
  );
}
function Ta(e) {
  const n = '\\[=*\\[',
    t = '\\]=*\\]',
    a = { begin: n, end: t, contains: ['self'] },
    s = [
      e.COMMENT('--(?!' + n + ')', '$'),
      e.COMMENT('--' + n, t, { contains: [a], relevance: 10 }),
    ];
  return {
    name: 'Lua',
    keywords: {
      $pattern: e.UNDERSCORE_IDENT_RE,
      literal: 'true false nil',
      keyword:
        'and break do else elseif end for goto if in local not or repeat return then until while',
      built_in:
        '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove',
    },
    contains: s.concat([
      {
        className: 'function',
        beginKeywords: 'function',
        end: '\\)',
        contains: [
          e.inherit(e.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
          { className: 'params', begin: '\\(', endsWithParent: !0, contains: s },
        ].concat(s),
      },
      e.C_NUMBER_MODE,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      { className: 'string', begin: n, end: t, contains: [a], relevance: 5 },
    ]),
  };
}
function wa(e) {
  const n = {
      className: 'variable',
      variants: [
        { begin: '\\$\\(' + e.UNDERSCORE_IDENT_RE + '\\)', contains: [e.BACKSLASH_ESCAPE] },
        { begin: /\$[@%<?\^\+\*]/ },
      ],
    },
    t = { className: 'string', begin: /"/, end: /"/, contains: [e.BACKSLASH_ESCAPE, n] },
    a = {
      className: 'variable',
      begin: /\$\([\w-]+\s/,
      end: /\)/,
      keywords: {
        built_in:
          'subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value',
      },
      contains: [n],
    },
    s = { begin: '^' + e.UNDERSCORE_IDENT_RE + '\\s*(?=[:+?]?=)' },
    u = {
      className: 'meta',
      begin: /^\.PHONY:/,
      end: /$/,
      keywords: { $pattern: /[\.\w]+/, keyword: '.PHONY' },
    },
    r = { className: 'section', begin: /^[^\s]+:/, end: /$/, contains: [n] };
  return {
    name: 'Makefile',
    aliases: ['mk', 'mak', 'make'],
    keywords: {
      $pattern: /[\w-]+/,
      keyword:
        'define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath',
    },
    contains: [e.HASH_COMMENT_MODE, n, t, a, s, u, r],
  };
}
function Oa(e) {
  const n = e.regex,
    t = { begin: /<\/?[A-Za-z_]/, end: '>', subLanguage: 'xml', relevance: 0 },
    a = { begin: '^[-\\*]{3,}', end: '$' },
    s = {
      className: 'code',
      variants: [
        { begin: '(`{3,})[^`](.|\\n)*?\\1`*[ ]*' },
        { begin: '(~{3,})[^~](.|\\n)*?\\1~*[ ]*' },
        { begin: '```', end: '```+[ ]*$' },
        { begin: '~~~', end: '~~~+[ ]*$' },
        { begin: '`.+?`' },
        {
          begin: '(?=^( {4}|\\t))',
          contains: [{ begin: '^( {4}|\\t)', end: '(\\n)$' }],
          relevance: 0,
        },
      ],
    },
    u = {
      className: 'bullet',
      begin: '^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)',
      end: '\\s+',
      excludeEnd: !0,
    },
    r = {
      begin: /^\[[^\n]+\]:/,
      returnBegin: !0,
      contains: [
        { className: 'symbol', begin: /\[/, end: /\]/, excludeBegin: !0, excludeEnd: !0 },
        { className: 'link', begin: /:\s*/, end: /$/, excludeBegin: !0 },
      ],
    },
    i = /[A-Za-z][A-Za-z0-9+.-]*/,
    o = {
      variants: [
        { begin: /\[.+?\]\[.*?\]/, relevance: 0 },
        { begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/, relevance: 2 },
        { begin: n.concat(/\[.+?\]\(/, i, /:\/\/.*?\)/), relevance: 2 },
        { begin: /\[.+?\]\([./?&#].*?\)/, relevance: 1 },
        { begin: /\[.*?\]\(.*?\)/, relevance: 0 },
      ],
      returnBegin: !0,
      contains: [
        { match: /\[(?=\])/ },
        {
          className: 'string',
          relevance: 0,
          begin: '\\[',
          end: '\\]',
          excludeBegin: !0,
          returnEnd: !0,
        },
        {
          className: 'link',
          relevance: 0,
          begin: '\\]\\(',
          end: '\\)',
          excludeBegin: !0,
          excludeEnd: !0,
        },
        {
          className: 'symbol',
          relevance: 0,
          begin: '\\]\\[',
          end: '\\]',
          excludeBegin: !0,
          excludeEnd: !0,
        },
      ],
    },
    c = {
      className: 'strong',
      contains: [],
      variants: [
        { begin: /_{2}(?!\s)/, end: /_{2}/ },
        { begin: /\*{2}(?!\s)/, end: /\*{2}/ },
      ],
    },
    l = {
      className: 'emphasis',
      contains: [],
      variants: [
        { begin: /\*(?![*\s])/, end: /\*/ },
        { begin: /_(?![_\s])/, end: /_/, relevance: 0 },
      ],
    },
    _ = e.inherit(c, { contains: [] }),
    b = e.inherit(l, { contains: [] });
  c.contains.push(b), l.contains.push(_);
  let m = [t, o];
  return (
    [c, l, _, b].forEach((f) => {
      f.contains = f.contains.concat(m);
    }),
    (m = m.concat(c, l)),
    {
      name: 'Markdown',
      aliases: ['md', 'mkdown', 'mkd'],
      contains: [
        {
          className: 'section',
          variants: [
            { begin: '^#{1,6}', end: '$', contains: m },
            {
              begin: '(?=^.+?\\n[=-]{2,}$)',
              contains: [{ begin: '^[=-]*$' }, { begin: '^', end: '\\n', contains: m }],
            },
          ],
        },
        t,
        u,
        c,
        l,
        { className: 'quote', begin: '^>\\s+', contains: m, end: '$' },
        s,
        a,
        o,
        r,
      ],
    }
  );
}
function Ra(e) {
  const n = {
      className: 'built_in',
      begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+',
    },
    t = /[a-zA-Z@][a-zA-Z0-9_]*/,
    i = {
      'variable.language': ['this', 'super'],
      $pattern: t,
      keyword: [
        'while',
        'export',
        'sizeof',
        'typedef',
        'const',
        'struct',
        'for',
        'union',
        'volatile',
        'static',
        'mutable',
        'if',
        'do',
        'return',
        'goto',
        'enum',
        'else',
        'break',
        'extern',
        'asm',
        'case',
        'default',
        'register',
        'explicit',
        'typename',
        'switch',
        'continue',
        'inline',
        'readonly',
        'assign',
        'readwrite',
        'self',
        '@synchronized',
        'id',
        'typeof',
        'nonatomic',
        'IBOutlet',
        'IBAction',
        'strong',
        'weak',
        'copy',
        'in',
        'out',
        'inout',
        'bycopy',
        'byref',
        'oneway',
        '__strong',
        '__weak',
        '__block',
        '__autoreleasing',
        '@private',
        '@protected',
        '@public',
        '@try',
        '@property',
        '@end',
        '@throw',
        '@catch',
        '@finally',
        '@autoreleasepool',
        '@synthesize',
        '@dynamic',
        '@selector',
        '@optional',
        '@required',
        '@encode',
        '@package',
        '@import',
        '@defs',
        '@compatibility_alias',
        '__bridge',
        '__bridge_transfer',
        '__bridge_retained',
        '__bridge_retain',
        '__covariant',
        '__contravariant',
        '__kindof',
        '_Nonnull',
        '_Nullable',
        '_Null_unspecified',
        '__FUNCTION__',
        '__PRETTY_FUNCTION__',
        '__attribute__',
        'getter',
        'setter',
        'retain',
        'unsafe_unretained',
        'nonnull',
        'nullable',
        'null_unspecified',
        'null_resettable',
        'class',
        'instancetype',
        'NS_DESIGNATED_INITIALIZER',
        'NS_UNAVAILABLE',
        'NS_REQUIRES_SUPER',
        'NS_RETURNS_INNER_POINTER',
        'NS_INLINE',
        'NS_AVAILABLE',
        'NS_DEPRECATED',
        'NS_ENUM',
        'NS_OPTIONS',
        'NS_SWIFT_UNAVAILABLE',
        'NS_ASSUME_NONNULL_BEGIN',
        'NS_ASSUME_NONNULL_END',
        'NS_REFINED_FOR_SWIFT',
        'NS_SWIFT_NAME',
        'NS_SWIFT_NOTHROW',
        'NS_DURING',
        'NS_HANDLER',
        'NS_ENDHANDLER',
        'NS_VALUERETURN',
        'NS_VOIDRETURN',
      ],
      literal: ['false', 'true', 'FALSE', 'TRUE', 'nil', 'YES', 'NO', 'NULL'],
      built_in: [
        'dispatch_once_t',
        'dispatch_queue_t',
        'dispatch_sync',
        'dispatch_async',
        'dispatch_once',
      ],
      type: [
        'int',
        'float',
        'char',
        'unsigned',
        'signed',
        'short',
        'long',
        'double',
        'wchar_t',
        'unichar',
        'void',
        'bool',
        'BOOL',
        'id|0',
        '_Bool',
      ],
    },
    o = { $pattern: t, keyword: ['@interface', '@class', '@protocol', '@implementation'] };
  return {
    name: 'Objective-C',
    aliases: ['mm', 'objc', 'obj-c', 'obj-c++', 'objective-c++'],
    keywords: i,
    illegal: '</',
    contains: [
      n,
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      e.C_NUMBER_MODE,
      e.QUOTE_STRING_MODE,
      e.APOS_STRING_MODE,
      {
        className: 'string',
        variants: [{ begin: '@"', end: '"', illegal: '\\n', contains: [e.BACKSLASH_ESCAPE] }],
      },
      {
        className: 'meta',
        begin: /#\s*[a-z]+\b/,
        end: /$/,
        keywords: {
          keyword: 'if else elif endif define undef warning error line pragma ifdef ifndef include',
        },
        contains: [
          { begin: /\\\n/, relevance: 0 },
          e.inherit(e.QUOTE_STRING_MODE, { className: 'string' }),
          { className: 'string', begin: /<.*?>/, end: /$/, illegal: '\\n' },
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE,
        ],
      },
      {
        className: 'class',
        begin: '(' + o.keyword.join('|') + ')\\b',
        end: /(\{|$)/,
        excludeEnd: !0,
        keywords: o,
        contains: [e.UNDERSCORE_TITLE_MODE],
      },
      { begin: '\\.' + e.UNDERSCORE_IDENT_RE, relevance: 0 },
    ],
  };
}
function Aa(e) {
  const n = e.regex,
    t = [
      'abs',
      'accept',
      'alarm',
      'and',
      'atan2',
      'bind',
      'binmode',
      'bless',
      'break',
      'caller',
      'chdir',
      'chmod',
      'chomp',
      'chop',
      'chown',
      'chr',
      'chroot',
      'close',
      'closedir',
      'connect',
      'continue',
      'cos',
      'crypt',
      'dbmclose',
      'dbmopen',
      'defined',
      'delete',
      'die',
      'do',
      'dump',
      'each',
      'else',
      'elsif',
      'endgrent',
      'endhostent',
      'endnetent',
      'endprotoent',
      'endpwent',
      'endservent',
      'eof',
      'eval',
      'exec',
      'exists',
      'exit',
      'exp',
      'fcntl',
      'fileno',
      'flock',
      'for',
      'foreach',
      'fork',
      'format',
      'formline',
      'getc',
      'getgrent',
      'getgrgid',
      'getgrnam',
      'gethostbyaddr',
      'gethostbyname',
      'gethostent',
      'getlogin',
      'getnetbyaddr',
      'getnetbyname',
      'getnetent',
      'getpeername',
      'getpgrp',
      'getpriority',
      'getprotobyname',
      'getprotobynumber',
      'getprotoent',
      'getpwent',
      'getpwnam',
      'getpwuid',
      'getservbyname',
      'getservbyport',
      'getservent',
      'getsockname',
      'getsockopt',
      'given',
      'glob',
      'gmtime',
      'goto',
      'grep',
      'gt',
      'hex',
      'if',
      'index',
      'int',
      'ioctl',
      'join',
      'keys',
      'kill',
      'last',
      'lc',
      'lcfirst',
      'length',
      'link',
      'listen',
      'local',
      'localtime',
      'log',
      'lstat',
      'lt',
      'ma',
      'map',
      'mkdir',
      'msgctl',
      'msgget',
      'msgrcv',
      'msgsnd',
      'my',
      'ne',
      'next',
      'no',
      'not',
      'oct',
      'open',
      'opendir',
      'or',
      'ord',
      'our',
      'pack',
      'package',
      'pipe',
      'pop',
      'pos',
      'print',
      'printf',
      'prototype',
      'push',
      'q|0',
      'qq',
      'quotemeta',
      'qw',
      'qx',
      'rand',
      'read',
      'readdir',
      'readline',
      'readlink',
      'readpipe',
      'recv',
      'redo',
      'ref',
      'rename',
      'require',
      'reset',
      'return',
      'reverse',
      'rewinddir',
      'rindex',
      'rmdir',
      'say',
      'scalar',
      'seek',
      'seekdir',
      'select',
      'semctl',
      'semget',
      'semop',
      'send',
      'setgrent',
      'sethostent',
      'setnetent',
      'setpgrp',
      'setpriority',
      'setprotoent',
      'setpwent',
      'setservent',
      'setsockopt',
      'shift',
      'shmctl',
      'shmget',
      'shmread',
      'shmwrite',
      'shutdown',
      'sin',
      'sleep',
      'socket',
      'socketpair',
      'sort',
      'splice',
      'split',
      'sprintf',
      'sqrt',
      'srand',
      'stat',
      'state',
      'study',
      'sub',
      'substr',
      'symlink',
      'syscall',
      'sysopen',
      'sysread',
      'sysseek',
      'system',
      'syswrite',
      'tell',
      'telldir',
      'tie',
      'tied',
      'time',
      'times',
      'tr',
      'truncate',
      'uc',
      'ucfirst',
      'umask',
      'undef',
      'unless',
      'unlink',
      'unpack',
      'unshift',
      'untie',
      'until',
      'use',
      'utime',
      'values',
      'vec',
      'wait',
      'waitpid',
      'wantarray',
      'warn',
      'when',
      'while',
      'write',
      'x|0',
      'xor',
      'y|0',
    ],
    a = /[dualxmsipngr]{0,12}/,
    s = { $pattern: /[\w.]+/, keyword: t.join(' ') },
    u = { className: 'subst', begin: '[$@]\\{', end: '\\}', keywords: s },
    r = { begin: /->\{/, end: /\}/ },
    i = {
      variants: [
        { begin: /\$\d/ },
        {
          begin: n.concat(
            /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
            '(?![A-Za-z])(?![@$%])',
          ),
        },
        { begin: /[$%@][^\s\w{]/, relevance: 0 },
      ],
    },
    o = [e.BACKSLASH_ESCAPE, u, i],
    c = [/!/, /\//, /\|/, /\?/, /'/, /"/, /#/],
    l = (m, h, y = '\\1') => {
      const f = y === '\\1' ? y : n.concat(y, h);
      return n.concat(
        n.concat('(?:', m, ')'),
        h,
        /(?:\\.|[^\\\/])*?/,
        f,
        /(?:\\.|[^\\\/])*?/,
        y,
        a,
      );
    },
    _ = (m, h, y) => n.concat(n.concat('(?:', m, ')'), h, /(?:\\.|[^\\\/])*?/, y, a),
    b = [
      i,
      e.HASH_COMMENT_MODE,
      e.COMMENT(/^=\w/, /=cut/, { endsWithParent: !0 }),
      r,
      {
        className: 'string',
        contains: o,
        variants: [
          { begin: 'q[qwxr]?\\s*\\(', end: '\\)', relevance: 5 },
          { begin: 'q[qwxr]?\\s*\\[', end: '\\]', relevance: 5 },
          { begin: 'q[qwxr]?\\s*\\{', end: '\\}', relevance: 5 },
          { begin: 'q[qwxr]?\\s*\\|', end: '\\|', relevance: 5 },
          { begin: 'q[qwxr]?\\s*<', end: '>', relevance: 5 },
          { begin: 'qw\\s+q', end: 'q', relevance: 5 },
          { begin: "'", end: "'", contains: [e.BACKSLASH_ESCAPE] },
          { begin: '"', end: '"' },
          { begin: '`', end: '`', contains: [e.BACKSLASH_ESCAPE] },
          { begin: /\{\w+\}/, relevance: 0 },
          { begin: '-?\\w+\\s*=>', relevance: 0 },
        ],
      },
      {
        className: 'number',
        begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
        relevance: 0,
      },
      {
        begin: '(\\/\\/|' + e.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
        keywords: 'split return print reverse grep',
        relevance: 0,
        contains: [
          e.HASH_COMMENT_MODE,
          {
            className: 'regexp',
            variants: [
              { begin: l('s|tr|y', n.either(...c, { capture: !0 })) },
              { begin: l('s|tr|y', '\\(', '\\)') },
              { begin: l('s|tr|y', '\\[', '\\]') },
              { begin: l('s|tr|y', '\\{', '\\}') },
            ],
            relevance: 2,
          },
          {
            className: 'regexp',
            variants: [
              { begin: /(m|qr)\/\//, relevance: 0 },
              { begin: _('(?:m|qr)?', /\//, /\//) },
              { begin: _('m|qr', n.either(...c, { capture: !0 }), /\1/) },
              { begin: _('m|qr', /\(/, /\)/) },
              { begin: _('m|qr', /\[/, /\]/) },
              { begin: _('m|qr', /\{/, /\}/) },
            ],
          },
        ],
      },
      {
        className: 'function',
        beginKeywords: 'sub',
        end: '(\\s*\\(.*?\\))?[;{]',
        excludeEnd: !0,
        relevance: 5,
        contains: [e.TITLE_MODE],
      },
      { begin: '-\\w\\b', relevance: 0 },
      {
        begin: '^__DATA__$',
        end: '^__END__$',
        subLanguage: 'mojolicious',
        contains: [{ begin: '^@@.*', end: '$', className: 'comment' }],
      },
    ];
  return (
    (u.contains = b),
    (r.contains = b),
    { name: 'Perl', aliases: ['pl', 'pm'], keywords: s, contains: b }
  );
}
function va(e) {
  const n = e.regex,
    t = /(?![A-Za-z0-9])(?![$])/,
    a = n.concat(/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/, t),
    s = n.concat(/(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/, t),
    u = { scope: 'variable', match: '\\$+' + a },
    r = {
      scope: 'meta',
      variants: [
        { begin: /<\?php/, relevance: 10 },
        { begin: /<\?=/ },
        { begin: /<\?/, relevance: 0.1 },
        { begin: /\?>/ },
      ],
    },
    i = { scope: 'subst', variants: [{ begin: /\$\w+/ }, { begin: /\{\$/, end: /\}/ }] },
    o = e.inherit(e.APOS_STRING_MODE, { illegal: null }),
    c = e.inherit(e.QUOTE_STRING_MODE, {
      illegal: null,
      contains: e.QUOTE_STRING_MODE.contains.concat(i),
    }),
    l = {
      begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
      end: /[ \t]*(\w+)\b/,
      contains: e.QUOTE_STRING_MODE.contains.concat(i),
      'on:begin': (z, $) => {
        $.data._beginMatch = z[1] || z[2];
      },
      'on:end': (z, $) => {
        $.data._beginMatch !== z[1] && $.ignoreMatch();
      },
    },
    _ = e.END_SAME_AS_BEGIN({ begin: /<<<[ \t]*'(\w+)'\n/, end: /[ \t]*(\w+)\b/ }),
    b = `[ 	
]`,
    m = { scope: 'string', variants: [c, o, l, _] },
    h = {
      scope: 'number',
      variants: [
        { begin: '\\b0[bB][01]+(?:_[01]+)*\\b' },
        { begin: '\\b0[oO][0-7]+(?:_[0-7]+)*\\b' },
        { begin: '\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b' },
        { begin: '(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?' },
      ],
      relevance: 0,
    },
    y = ['false', 'null', 'true'],
    f = [
      '__CLASS__',
      '__DIR__',
      '__FILE__',
      '__FUNCTION__',
      '__COMPILER_HALT_OFFSET__',
      '__LINE__',
      '__METHOD__',
      '__NAMESPACE__',
      '__TRAIT__',
      'die',
      'echo',
      'exit',
      'include',
      'include_once',
      'print',
      'require',
      'require_once',
      'array',
      'abstract',
      'and',
      'as',
      'binary',
      'bool',
      'boolean',
      'break',
      'callable',
      'case',
      'catch',
      'class',
      'clone',
      'const',
      'continue',
      'declare',
      'default',
      'do',
      'double',
      'else',
      'elseif',
      'empty',
      'enddeclare',
      'endfor',
      'endforeach',
      'endif',
      'endswitch',
      'endwhile',
      'enum',
      'eval',
      'extends',
      'final',
      'finally',
      'float',
      'for',
      'foreach',
      'from',
      'global',
      'goto',
      'if',
      'implements',
      'instanceof',
      'insteadof',
      'int',
      'integer',
      'interface',
      'isset',
      'iterable',
      'list',
      'match|0',
      'mixed',
      'new',
      'never',
      'object',
      'or',
      'private',
      'protected',
      'public',
      'readonly',
      'real',
      'return',
      'string',
      'switch',
      'throw',
      'trait',
      'try',
      'unset',
      'use',
      'var',
      'void',
      'while',
      'xor',
      'yield',
    ],
    A = [
      'Error|0',
      'AppendIterator',
      'ArgumentCountError',
      'ArithmeticError',
      'ArrayIterator',
      'ArrayObject',
      'AssertionError',
      'BadFunctionCallException',
      'BadMethodCallException',
      'CachingIterator',
      'CallbackFilterIterator',
      'CompileError',
      'Countable',
      'DirectoryIterator',
      'DivisionByZeroError',
      'DomainException',
      'EmptyIterator',
      'ErrorException',
      'Exception',
      'FilesystemIterator',
      'FilterIterator',
      'GlobIterator',
      'InfiniteIterator',
      'InvalidArgumentException',
      'IteratorIterator',
      'LengthException',
      'LimitIterator',
      'LogicException',
      'MultipleIterator',
      'NoRewindIterator',
      'OutOfBoundsException',
      'OutOfRangeException',
      'OuterIterator',
      'OverflowException',
      'ParentIterator',
      'ParseError',
      'RangeException',
      'RecursiveArrayIterator',
      'RecursiveCachingIterator',
      'RecursiveCallbackFilterIterator',
      'RecursiveDirectoryIterator',
      'RecursiveFilterIterator',
      'RecursiveIterator',
      'RecursiveIteratorIterator',
      'RecursiveRegexIterator',
      'RecursiveTreeIterator',
      'RegexIterator',
      'RuntimeException',
      'SeekableIterator',
      'SplDoublyLinkedList',
      'SplFileInfo',
      'SplFileObject',
      'SplFixedArray',
      'SplHeap',
      'SplMaxHeap',
      'SplMinHeap',
      'SplObjectStorage',
      'SplObserver',
      'SplPriorityQueue',
      'SplQueue',
      'SplStack',
      'SplSubject',
      'SplTempFileObject',
      'TypeError',
      'UnderflowException',
      'UnexpectedValueException',
      'UnhandledMatchError',
      'ArrayAccess',
      'BackedEnum',
      'Closure',
      'Fiber',
      'Generator',
      'Iterator',
      'IteratorAggregate',
      'Serializable',
      'Stringable',
      'Throwable',
      'Traversable',
      'UnitEnum',
      'WeakReference',
      'WeakMap',
      'Directory',
      '__PHP_Incomplete_Class',
      'parent',
      'php_user_filter',
      'self',
      'static',
      'stdClass',
    ],
    R = {
      keyword: f,
      literal: ((z) => {
        const $ = [];
        return (
          z.forEach((G) => {
            $.push(G), G.toLowerCase() === G ? $.push(G.toUpperCase()) : $.push(G.toLowerCase());
          }),
          $
        );
      })(y),
      built_in: A,
    },
    S = (z) => z.map(($) => $.replace(/\|\d+$/, '')),
    x = {
      variants: [
        {
          match: [/new/, n.concat(b, '+'), n.concat('(?!', S(A).join('\\b|'), '\\b)'), s],
          scope: { 1: 'keyword', 4: 'title.class' },
        },
      ],
    },
    v = n.concat(a, '\\b(?!\\()'),
    C = {
      variants: [
        {
          match: [n.concat(/::/, n.lookahead(/(?!class\b)/)), v],
          scope: { 2: 'variable.constant' },
        },
        { match: [/::/, /class/], scope: { 2: 'variable.language' } },
        {
          match: [s, n.concat(/::/, n.lookahead(/(?!class\b)/)), v],
          scope: { 1: 'title.class', 3: 'variable.constant' },
        },
        { match: [s, n.concat('::', n.lookahead(/(?!class\b)/))], scope: { 1: 'title.class' } },
        { match: [s, /::/, /class/], scope: { 1: 'title.class', 3: 'variable.language' } },
      ],
    },
    F = { scope: 'attr', match: n.concat(a, n.lookahead(':'), n.lookahead(/(?!::)/)) },
    U = {
      relevance: 0,
      begin: /\(/,
      end: /\)/,
      keywords: R,
      contains: [F, u, C, e.C_BLOCK_COMMENT_MODE, m, h, x],
    },
    Y = {
      relevance: 0,
      match: [
        /\b/,
        n.concat('(?!fn\\b|function\\b|', S(f).join('\\b|'), '|', S(A).join('\\b|'), '\\b)'),
        a,
        n.concat(b, '*'),
        n.lookahead(/(?=\()/),
      ],
      scope: { 3: 'title.function.invoke' },
      contains: [U],
    };
  U.contains.push(Y);
  const X = [F, C, e.C_BLOCK_COMMENT_MODE, m, h, x],
    J = {
      begin: n.concat(/#\[\s*/, s),
      beginScope: 'meta',
      end: /]/,
      endScope: 'meta',
      keywords: { literal: y, keyword: ['new', 'array'] },
      contains: [
        {
          begin: /\[/,
          end: /]/,
          keywords: { literal: y, keyword: ['new', 'array'] },
          contains: ['self', ...X],
        },
        ...X,
        { scope: 'meta', match: s },
      ],
    };
  return {
    case_insensitive: !1,
    keywords: R,
    contains: [
      J,
      e.HASH_COMMENT_MODE,
      e.COMMENT('//', '$'),
      e.COMMENT('/\\*', '\\*/', { contains: [{ scope: 'doctag', match: '@[A-Za-z]+' }] }),
      {
        match: /__halt_compiler\(\);/,
        keywords: '__halt_compiler',
        starts: {
          scope: 'comment',
          end: e.MATCH_NOTHING_RE,
          contains: [{ match: /\?>/, scope: 'meta', endsParent: !0 }],
        },
      },
      r,
      { scope: 'variable.language', match: /\$this\b/ },
      u,
      Y,
      C,
      { match: [/const/, /\s/, a], scope: { 1: 'keyword', 3: 'variable.constant' } },
      x,
      {
        scope: 'function',
        relevance: 0,
        beginKeywords: 'fn function',
        end: /[;{]/,
        excludeEnd: !0,
        illegal: '[$%\\[]',
        contains: [
          { beginKeywords: 'use' },
          e.UNDERSCORE_TITLE_MODE,
          { begin: '=>', endsParent: !0 },
          {
            scope: 'params',
            begin: '\\(',
            end: '\\)',
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: R,
            contains: ['self', u, C, e.C_BLOCK_COMMENT_MODE, m, h],
          },
        ],
      },
      {
        scope: 'class',
        variants: [
          { beginKeywords: 'enum', illegal: /[($"]/ },
          { beginKeywords: 'class interface trait', illegal: /[:($"]/ },
        ],
        relevance: 0,
        end: /\{/,
        excludeEnd: !0,
        contains: [{ beginKeywords: 'extends implements' }, e.UNDERSCORE_TITLE_MODE],
      },
      {
        beginKeywords: 'namespace',
        relevance: 0,
        end: ';',
        illegal: /[.']/,
        contains: [e.inherit(e.UNDERSCORE_TITLE_MODE, { scope: 'title.class' })],
      },
      {
        beginKeywords: 'use',
        relevance: 0,
        end: ';',
        contains: [{ match: /\b(as|const|function)\b/, scope: 'keyword' }, e.UNDERSCORE_TITLE_MODE],
      },
      m,
      h,
    ],
  };
}
function Ma(e) {
  return {
    name: 'PHP template',
    subLanguage: 'xml',
    contains: [
      {
        begin: /<\?(php|=)?/,
        end: /\?>/,
        subLanguage: 'php',
        contains: [
          { begin: '/\\*', end: '\\*/', skip: !0 },
          { begin: 'b"', end: '"', skip: !0 },
          { begin: "b'", end: "'", skip: !0 },
          e.inherit(e.APOS_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0,
          }),
          e.inherit(e.QUOTE_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0,
          }),
        ],
      },
    ],
  };
}
function Ia(e) {
  return { name: 'Plain text', aliases: ['text', 'txt'], disableAutodetect: !0 };
}
function Ca(e) {
  const n = e.regex,
    t = new RegExp('[\\p{XID_Start}_]\\p{XID_Continue}*', 'u'),
    a = [
      'and',
      'as',
      'assert',
      'async',
      'await',
      'break',
      'case',
      'class',
      'continue',
      'def',
      'del',
      'elif',
      'else',
      'except',
      'finally',
      'for',
      'from',
      'global',
      'if',
      'import',
      'in',
      'is',
      'lambda',
      'match',
      'nonlocal|10',
      'not',
      'or',
      'pass',
      'raise',
      'return',
      'try',
      'while',
      'with',
      'yield',
    ],
    i = {
      $pattern: /[A-Za-z]\w+|__\w+__/,
      keyword: a,
      built_in: [
        '__import__',
        'abs',
        'all',
        'any',
        'ascii',
        'bin',
        'bool',
        'breakpoint',
        'bytearray',
        'bytes',
        'callable',
        'chr',
        'classmethod',
        'compile',
        'complex',
        'delattr',
        'dict',
        'dir',
        'divmod',
        'enumerate',
        'eval',
        'exec',
        'filter',
        'float',
        'format',
        'frozenset',
        'getattr',
        'globals',
        'hasattr',
        'hash',
        'help',
        'hex',
        'id',
        'input',
        'int',
        'isinstance',
        'issubclass',
        'iter',
        'len',
        'list',
        'locals',
        'map',
        'max',
        'memoryview',
        'min',
        'next',
        'object',
        'oct',
        'open',
        'ord',
        'pow',
        'print',
        'property',
        'range',
        'repr',
        'reversed',
        'round',
        'set',
        'setattr',
        'slice',
        'sorted',
        'staticmethod',
        'str',
        'sum',
        'super',
        'tuple',
        'type',
        'vars',
        'zip',
      ],
      literal: ['__debug__', 'Ellipsis', 'False', 'None', 'NotImplemented', 'True'],
      type: [
        'Any',
        'Callable',
        'Coroutine',
        'Dict',
        'List',
        'Literal',
        'Generic',
        'Optional',
        'Sequence',
        'Set',
        'Tuple',
        'Type',
        'Union',
      ],
    },
    o = { className: 'meta', begin: /^(>>>|\.\.\.) / },
    c = { className: 'subst', begin: /\{/, end: /\}/, keywords: i, illegal: /#/ },
    l = { begin: /\{\{/, relevance: 0 },
    _ = {
      className: 'string',
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
          end: /'''/,
          contains: [e.BACKSLASH_ESCAPE, o],
          relevance: 10,
        },
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
          end: /"""/,
          contains: [e.BACKSLASH_ESCAPE, o],
          relevance: 10,
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'''/,
          end: /'''/,
          contains: [e.BACKSLASH_ESCAPE, o, l, c],
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"""/,
          end: /"""/,
          contains: [e.BACKSLASH_ESCAPE, o, l, c],
        },
        { begin: /([uU]|[rR])'/, end: /'/, relevance: 10 },
        { begin: /([uU]|[rR])"/, end: /"/, relevance: 10 },
        { begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/ },
        { begin: /([bB]|[bB][rR]|[rR][bB])"/, end: /"/ },
        { begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/, contains: [e.BACKSLASH_ESCAPE, l, c] },
        { begin: /([fF][rR]|[rR][fF]|[fF])"/, end: /"/, contains: [e.BACKSLASH_ESCAPE, l, c] },
        e.APOS_STRING_MODE,
        e.QUOTE_STRING_MODE,
      ],
    },
    b = '[0-9](_?[0-9])*',
    m = `(\\b(${b}))?\\.(${b})|\\b(${b})\\.`,
    h = `\\b|${a.join('|')}`,
    y = {
      className: 'number',
      relevance: 0,
      variants: [
        { begin: `(\\b(${b})|(${m}))[eE][+-]?(${b})[jJ]?(?=${h})` },
        { begin: `(${m})[jJ]?` },
        { begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${h})` },
        { begin: `\\b0[bB](_?[01])+[lL]?(?=${h})` },
        { begin: `\\b0[oO](_?[0-7])+[lL]?(?=${h})` },
        { begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${h})` },
        { begin: `\\b(${b})[jJ](?=${h})` },
      ],
    },
    f = {
      className: 'comment',
      begin: n.lookahead(/# type:/),
      end: /$/,
      keywords: i,
      contains: [{ begin: /# type:/ }, { begin: /#/, end: /\b\B/, endsWithParent: !0 }],
    },
    A = {
      className: 'params',
      variants: [
        { className: '', begin: /\(\s*\)/, skip: !0 },
        {
          begin: /\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          keywords: i,
          contains: ['self', o, y, _, e.HASH_COMMENT_MODE],
        },
      ],
    };
  return (
    (c.contains = [_, y, o]),
    {
      name: 'Python',
      aliases: ['py', 'gyp', 'ipython'],
      unicodeRegex: !0,
      keywords: i,
      illegal: /(<\/|\?)|=>/,
      contains: [
        o,
        y,
        { begin: /\bself\b/ },
        { beginKeywords: 'if', relevance: 0 },
        _,
        f,
        e.HASH_COMMENT_MODE,
        { match: [/\bdef/, /\s+/, t], scope: { 1: 'keyword', 3: 'title.function' }, contains: [A] },
        {
          variants: [
            { match: [/\bclass/, /\s+/, t, /\s*/, /\(\s*/, t, /\s*\)/] },
            { match: [/\bclass/, /\s+/, t] },
          ],
          scope: { 1: 'keyword', 3: 'title.class', 6: 'title.class.inherited' },
        },
        { className: 'meta', begin: /^[\t ]*@/, end: /(?=#)|$/, contains: [y, A, _] },
      ],
    }
  );
}
function ka(e) {
  return {
    aliases: ['pycon'],
    contains: [
      {
        className: 'meta.prompt',
        starts: { end: / |$/, starts: { end: '$', subLanguage: 'python' } },
        variants: [{ begin: /^>>>(?=[ ]|$)/ }, { begin: /^\.\.\.(?=[ ]|$)/ }],
      },
    ],
  };
}
function xa(e) {
  const n = e.regex,
    t = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/,
    a = n.either(
      /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
      /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
      /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/,
    ),
    s = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/,
    u = n.either(/[()]/, /[{}]/, /\[\[/, /[[\]]/, /\\/, /,/);
  return {
    name: 'R',
    keywords: {
      $pattern: t,
      keyword: 'function if in break next repeat else for while',
      literal:
        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10',
      built_in:
        'LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm',
    },
    contains: [
      e.COMMENT(/#'/, /$/, {
        contains: [
          {
            scope: 'doctag',
            match: /@examples/,
            starts: {
              end: n.lookahead(n.either(/\n^#'\s*(?=@[a-zA-Z]+)/, /\n^(?!#')/)),
              endsParent: !0,
            },
          },
          {
            scope: 'doctag',
            begin: '@param',
            end: /$/,
            contains: [
              {
                scope: 'variable',
                variants: [{ match: t }, { match: /`(?:\\.|[^`\\])+`/ }],
                endsParent: !0,
              },
            ],
          },
          { scope: 'doctag', match: /@[a-zA-Z]+/ },
          { scope: 'keyword', match: /\\[a-zA-Z]+/ },
        ],
      }),
      e.HASH_COMMENT_MODE,
      {
        scope: 'string',
        contains: [e.BACKSLASH_ESCAPE],
        variants: [
          e.END_SAME_AS_BEGIN({ begin: /[rR]"(-*)\(/, end: /\)(-*)"/ }),
          e.END_SAME_AS_BEGIN({ begin: /[rR]"(-*)\{/, end: /\}(-*)"/ }),
          e.END_SAME_AS_BEGIN({ begin: /[rR]"(-*)\[/, end: /\](-*)"/ }),
          e.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\(/, end: /\)(-*)'/ }),
          e.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\{/, end: /\}(-*)'/ }),
          e.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\[/, end: /\](-*)'/ }),
          { begin: '"', end: '"', relevance: 0 },
          { begin: "'", end: "'", relevance: 0 },
        ],
      },
      {
        relevance: 0,
        variants: [
          { scope: { 1: 'operator', 2: 'number' }, match: [s, a] },
          { scope: { 1: 'operator', 2: 'number' }, match: [/%[^%]*%/, a] },
          { scope: { 1: 'punctuation', 2: 'number' }, match: [u, a] },
          { scope: { 2: 'number' }, match: [/[^a-zA-Z0-9._]|^/, a] },
        ],
      },
      { scope: { 3: 'operator' }, match: [t, /\s+/, /<-/, /\s+/] },
      { scope: 'operator', relevance: 0, variants: [{ match: s }, { match: /%[^%]*%/ }] },
      { scope: 'punctuation', relevance: 0, match: u },
      { begin: '`', end: '`', contains: [{ begin: /\\./ }] },
    ],
  };
}
function Da(e) {
  const n = e.regex,
    t = '([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)',
    a = n.either(/\b([A-Z]+[a-z0-9]+)+/, /\b([A-Z]+[a-z0-9]+)+[A-Z]+/),
    s = n.concat(a, /(::\w+)*/),
    r = {
      'variable.constant': ['__FILE__', '__LINE__', '__ENCODING__'],
      'variable.language': ['self', 'super'],
      keyword: [
        'alias',
        'and',
        'begin',
        'BEGIN',
        'break',
        'case',
        'class',
        'defined',
        'do',
        'else',
        'elsif',
        'end',
        'END',
        'ensure',
        'for',
        'if',
        'in',
        'module',
        'next',
        'not',
        'or',
        'redo',
        'require',
        'rescue',
        'retry',
        'return',
        'then',
        'undef',
        'unless',
        'until',
        'when',
        'while',
        'yield',
        ...['include', 'extend', 'prepend', 'public', 'private', 'protected', 'raise', 'throw'],
      ],
      built_in: [
        'proc',
        'lambda',
        'attr_accessor',
        'attr_reader',
        'attr_writer',
        'define_method',
        'private_constant',
        'module_function',
      ],
      literal: ['true', 'false', 'nil'],
    },
    i = { className: 'doctag', begin: '@[A-Za-z]+' },
    o = { begin: '#<', end: '>' },
    c = [
      e.COMMENT('#', '$', { contains: [i] }),
      e.COMMENT('^=begin', '^=end', { contains: [i], relevance: 10 }),
      e.COMMENT('^__END__', e.MATCH_NOTHING_RE),
    ],
    l = { className: 'subst', begin: /#\{/, end: /\}/, keywords: r },
    _ = {
      className: 'string',
      contains: [e.BACKSLASH_ESCAPE, l],
      variants: [
        { begin: /'/, end: /'/ },
        { begin: /"/, end: /"/ },
        { begin: /`/, end: /`/ },
        { begin: /%[qQwWx]?\(/, end: /\)/ },
        { begin: /%[qQwWx]?\[/, end: /\]/ },
        { begin: /%[qQwWx]?\{/, end: /\}/ },
        { begin: /%[qQwWx]?</, end: />/ },
        { begin: /%[qQwWx]?\//, end: /\// },
        { begin: /%[qQwWx]?%/, end: /%/ },
        { begin: /%[qQwWx]?-/, end: /-/ },
        { begin: /%[qQwWx]?\|/, end: /\|/ },
        { begin: /\B\?(\\\d{1,3})/ },
        { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
        { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
        { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
        { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
        { begin: /\B\?\\?\S/ },
        {
          begin: n.concat(/<<[-~]?'?/, n.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)),
          contains: [
            e.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              contains: [e.BACKSLASH_ESCAPE, l],
            }),
          ],
        },
      ],
    },
    b = '[1-9](_?[0-9])*|0',
    m = '[0-9](_?[0-9])*',
    h = {
      className: 'number',
      relevance: 0,
      variants: [
        { begin: `\\b(${b})(\\.(${m}))?([eE][+-]?(${m})|r)?i?\\b` },
        { begin: '\\b0[dD][0-9](_?[0-9])*r?i?\\b' },
        { begin: '\\b0[bB][0-1](_?[0-1])*r?i?\\b' },
        { begin: '\\b0[oO][0-7](_?[0-7])*r?i?\\b' },
        { begin: '\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b' },
        { begin: '\\b0(_?[0-7])+r?i?\\b' },
      ],
    },
    y = {
      variants: [
        { match: /\(\)/ },
        {
          className: 'params',
          begin: /\(/,
          end: /(?=\))/,
          excludeBegin: !0,
          endsParent: !0,
          keywords: r,
        },
      ],
    },
    v = [
      _,
      {
        variants: [{ match: [/class\s+/, s, /\s+<\s+/, s] }, { match: [/\b(class|module)\s+/, s] }],
        scope: { 2: 'title.class', 4: 'title.class.inherited' },
        keywords: r,
      },
      { match: [/(include|extend)\s+/, s], scope: { 2: 'title.class' }, keywords: r },
      { relevance: 0, match: [s, /\.new[. (]/], scope: { 1: 'title.class' } },
      { relevance: 0, match: /\b[A-Z][A-Z_0-9]+\b/, className: 'variable.constant' },
      { relevance: 0, match: a, scope: 'title.class' },
      { match: [/def/, /\s+/, t], scope: { 1: 'keyword', 3: 'title.function' }, contains: [y] },
      { begin: e.IDENT_RE + '::' },
      { className: 'symbol', begin: e.UNDERSCORE_IDENT_RE + '(!|\\?)?:', relevance: 0 },
      { className: 'symbol', begin: ':(?!\\s)', contains: [_, { begin: t }], relevance: 0 },
      h,
      {
        className: 'variable',
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])",
      },
      {
        className: 'params',
        begin: /\|/,
        end: /\|/,
        excludeBegin: !0,
        excludeEnd: !0,
        relevance: 0,
        keywords: r,
      },
      {
        begin: '(' + e.RE_STARTERS_RE + '|unless)\\s*',
        keywords: 'unless',
        contains: [
          {
            className: 'regexp',
            contains: [e.BACKSLASH_ESCAPE, l],
            illegal: /\n/,
            variants: [
              { begin: '/', end: '/[a-z]*' },
              { begin: /%r\{/, end: /\}[a-z]*/ },
              { begin: '%r\\(', end: '\\)[a-z]*' },
              { begin: '%r!', end: '![a-z]*' },
              { begin: '%r\\[', end: '\\][a-z]*' },
            ],
          },
        ].concat(o, c),
        relevance: 0,
      },
    ].concat(o, c);
  (l.contains = v), (y.contains = v);
  const Y = [
    { begin: /^\s*=>/, starts: { end: '$', contains: v } },
    {
      className: 'meta.prompt',
      begin:
        '^(' +
        '[>?]>' +
        '|' +
        '[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]' +
        '|' +
        '(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>' +
        ')(?=[ ])',
      starts: { end: '$', keywords: r, contains: v },
    },
  ];
  return (
    c.unshift(o),
    {
      name: 'Ruby',
      aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],
      keywords: r,
      illegal: /\/\*/,
      contains: [e.SHEBANG({ binary: 'ruby' })].concat(Y).concat(c).concat(v),
    }
  );
}
function La(e) {
  const n = e.regex,
    t = {
      className: 'title.function.invoke',
      relevance: 0,
      begin: n.concat(/\b/, /(?!let\b)/, e.IDENT_RE, n.lookahead(/\s*\(/)),
    },
    a = '([ui](8|16|32|64|128|size)|f(32|64))?',
    s = [
      'abstract',
      'as',
      'async',
      'await',
      'become',
      'box',
      'break',
      'const',
      'continue',
      'crate',
      'do',
      'dyn',
      'else',
      'enum',
      'extern',
      'false',
      'final',
      'fn',
      'for',
      'if',
      'impl',
      'in',
      'let',
      'loop',
      'macro',
      'match',
      'mod',
      'move',
      'mut',
      'override',
      'priv',
      'pub',
      'ref',
      'return',
      'self',
      'Self',
      'static',
      'struct',
      'super',
      'trait',
      'true',
      'try',
      'type',
      'typeof',
      'unsafe',
      'unsized',
      'use',
      'virtual',
      'where',
      'while',
      'yield',
    ],
    u = ['true', 'false', 'Some', 'None', 'Ok', 'Err'],
    r = [
      'drop ',
      'Copy',
      'Send',
      'Sized',
      'Sync',
      'Drop',
      'Fn',
      'FnMut',
      'FnOnce',
      'ToOwned',
      'Clone',
      'Debug',
      'PartialEq',
      'PartialOrd',
      'Eq',
      'Ord',
      'AsRef',
      'AsMut',
      'Into',
      'From',
      'Default',
      'Iterator',
      'Extend',
      'IntoIterator',
      'DoubleEndedIterator',
      'ExactSizeIterator',
      'SliceConcatExt',
      'ToString',
      'assert!',
      'assert_eq!',
      'bitflags!',
      'bytes!',
      'cfg!',
      'col!',
      'concat!',
      'concat_idents!',
      'debug_assert!',
      'debug_assert_eq!',
      'env!',
      'panic!',
      'file!',
      'format!',
      'format_args!',
      'include_bytes!',
      'include_str!',
      'line!',
      'local_data_key!',
      'module_path!',
      'option_env!',
      'print!',
      'println!',
      'select!',
      'stringify!',
      'try!',
      'unimplemented!',
      'unreachable!',
      'vec!',
      'write!',
      'writeln!',
      'macro_rules!',
      'assert_ne!',
      'debug_assert_ne!',
    ],
    i = [
      'i8',
      'i16',
      'i32',
      'i64',
      'i128',
      'isize',
      'u8',
      'u16',
      'u32',
      'u64',
      'u128',
      'usize',
      'f32',
      'f64',
      'str',
      'char',
      'bool',
      'Box',
      'Option',
      'Result',
      'String',
      'Vec',
    ];
  return {
    name: 'Rust',
    aliases: ['rs'],
    keywords: { $pattern: e.IDENT_RE + '!?', type: i, keyword: s, literal: u, built_in: r },
    illegal: '</',
    contains: [
      e.C_LINE_COMMENT_MODE,
      e.COMMENT('/\\*', '\\*/', { contains: ['self'] }),
      e.inherit(e.QUOTE_STRING_MODE, { begin: /b?"/, illegal: null }),
      {
        className: 'string',
        variants: [
          { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
          { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ },
        ],
      },
      { className: 'symbol', begin: /'[a-zA-Z_][a-zA-Z0-9_]*/ },
      {
        className: 'number',
        variants: [
          { begin: '\\b0b([01_]+)' + a },
          { begin: '\\b0o([0-7_]+)' + a },
          { begin: '\\b0x([A-Fa-f0-9_]+)' + a },
          { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' + a },
        ],
        relevance: 0,
      },
      {
        begin: [/fn/, /\s+/, e.UNDERSCORE_IDENT_RE],
        className: { 1: 'keyword', 3: 'title.function' },
      },
      {
        className: 'meta',
        begin: '#!?\\[',
        end: '\\]',
        contains: [{ className: 'string', begin: /"/, end: /"/ }],
      },
      {
        begin: [/let/, /\s+/, /(?:mut\s+)?/, e.UNDERSCORE_IDENT_RE],
        className: { 1: 'keyword', 3: 'keyword', 4: 'variable' },
      },
      {
        begin: [/for/, /\s+/, e.UNDERSCORE_IDENT_RE, /\s+/, /in/],
        className: { 1: 'keyword', 3: 'variable', 5: 'keyword' },
      },
      {
        begin: [/type/, /\s+/, e.UNDERSCORE_IDENT_RE],
        className: { 1: 'keyword', 3: 'title.class' },
      },
      {
        begin: [/(?:trait|enum|struct|union|impl|for)/, /\s+/, e.UNDERSCORE_IDENT_RE],
        className: { 1: 'keyword', 3: 'title.class' },
      },
      { begin: e.IDENT_RE + '::', keywords: { keyword: 'Self', built_in: r, type: i } },
      { className: 'punctuation', begin: '->' },
      t,
    ],
  };
}
const et = (e) => ({
    IMPORTANT: { scope: 'meta', begin: '!important' },
    BLOCK_COMMENT: e.C_BLOCK_COMMENT_MODE,
    HEXCOLOR: { scope: 'number', begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/ },
    FUNCTION_DISPATCH: { className: 'built_in', begin: /[\w-]+(?=\()/ },
    ATTRIBUTE_SELECTOR_MODE: {
      scope: 'selector-attr',
      begin: /\[/,
      end: /\]/,
      illegal: '$',
      contains: [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE],
    },
    CSS_NUMBER_MODE: {
      scope: 'number',
      begin:
        e.NUMBER_RE +
        '(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?',
      relevance: 0,
    },
    CSS_VARIABLE: { className: 'attr', begin: /--[A-Za-z][A-Za-z0-9_-]*/ },
  }),
  nt = [
    'a',
    'abbr',
    'address',
    'article',
    'aside',
    'audio',
    'b',
    'blockquote',
    'body',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'dd',
    'del',
    'details',
    'dfn',
    'div',
    'dl',
    'dt',
    'em',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hgroup',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'main',
    'mark',
    'menu',
    'nav',
    'object',
    'ol',
    'p',
    'q',
    'quote',
    'samp',
    'section',
    'span',
    'strong',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'tr',
    'ul',
    'var',
    'video',
  ],
  tt = [
    'any-hover',
    'any-pointer',
    'aspect-ratio',
    'color',
    'color-gamut',
    'color-index',
    'device-aspect-ratio',
    'device-height',
    'device-width',
    'display-mode',
    'forced-colors',
    'grid',
    'height',
    'hover',
    'inverted-colors',
    'monochrome',
    'orientation',
    'overflow-block',
    'overflow-inline',
    'pointer',
    'prefers-color-scheme',
    'prefers-contrast',
    'prefers-reduced-motion',
    'prefers-reduced-transparency',
    'resolution',
    'scan',
    'scripting',
    'update',
    'width',
    'min-width',
    'max-width',
    'min-height',
    'max-height',
  ],
  at = [
    'active',
    'any-link',
    'blank',
    'checked',
    'current',
    'default',
    'defined',
    'dir',
    'disabled',
    'drop',
    'empty',
    'enabled',
    'first',
    'first-child',
    'first-of-type',
    'fullscreen',
    'future',
    'focus',
    'focus-visible',
    'focus-within',
    'has',
    'host',
    'host-context',
    'hover',
    'indeterminate',
    'in-range',
    'invalid',
    'is',
    'lang',
    'last-child',
    'last-of-type',
    'left',
    'link',
    'local-link',
    'not',
    'nth-child',
    'nth-col',
    'nth-last-child',
    'nth-last-col',
    'nth-last-of-type',
    'nth-of-type',
    'only-child',
    'only-of-type',
    'optional',
    'out-of-range',
    'past',
    'placeholder-shown',
    'read-only',
    'read-write',
    'required',
    'right',
    'root',
    'scope',
    'target',
    'target-within',
    'user-invalid',
    'valid',
    'visited',
    'where',
  ],
  it = [
    'after',
    'backdrop',
    'before',
    'cue',
    'cue-region',
    'first-letter',
    'first-line',
    'grammar-error',
    'marker',
    'part',
    'placeholder',
    'selection',
    'slotted',
    'spelling-error',
  ],
  rt = [
    'align-content',
    'align-items',
    'align-self',
    'all',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'backface-visibility',
    'background',
    'background-attachment',
    'background-blend-mode',
    'background-clip',
    'background-color',
    'background-image',
    'background-origin',
    'background-position',
    'background-repeat',
    'background-size',
    'block-size',
    'border',
    'border-block',
    'border-block-color',
    'border-block-end',
    'border-block-end-color',
    'border-block-end-style',
    'border-block-end-width',
    'border-block-start',
    'border-block-start-color',
    'border-block-start-style',
    'border-block-start-width',
    'border-block-style',
    'border-block-width',
    'border-bottom',
    'border-bottom-color',
    'border-bottom-left-radius',
    'border-bottom-right-radius',
    'border-bottom-style',
    'border-bottom-width',
    'border-collapse',
    'border-color',
    'border-image',
    'border-image-outset',
    'border-image-repeat',
    'border-image-slice',
    'border-image-source',
    'border-image-width',
    'border-inline',
    'border-inline-color',
    'border-inline-end',
    'border-inline-end-color',
    'border-inline-end-style',
    'border-inline-end-width',
    'border-inline-start',
    'border-inline-start-color',
    'border-inline-start-style',
    'border-inline-start-width',
    'border-inline-style',
    'border-inline-width',
    'border-left',
    'border-left-color',
    'border-left-style',
    'border-left-width',
    'border-radius',
    'border-right',
    'border-right-color',
    'border-right-style',
    'border-right-width',
    'border-spacing',
    'border-style',
    'border-top',
    'border-top-color',
    'border-top-left-radius',
    'border-top-right-radius',
    'border-top-style',
    'border-top-width',
    'border-width',
    'bottom',
    'box-decoration-break',
    'box-shadow',
    'box-sizing',
    'break-after',
    'break-before',
    'break-inside',
    'caption-side',
    'caret-color',
    'clear',
    'clip',
    'clip-path',
    'clip-rule',
    'color',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'columns',
    'contain',
    'content',
    'content-visibility',
    'counter-increment',
    'counter-reset',
    'cue',
    'cue-after',
    'cue-before',
    'cursor',
    'direction',
    'display',
    'empty-cells',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'float',
    'flow',
    'font',
    'font-display',
    'font-family',
    'font-feature-settings',
    'font-kerning',
    'font-language-override',
    'font-size',
    'font-size-adjust',
    'font-smoothing',
    'font-stretch',
    'font-style',
    'font-synthesis',
    'font-variant',
    'font-variant-caps',
    'font-variant-east-asian',
    'font-variant-ligatures',
    'font-variant-numeric',
    'font-variant-position',
    'font-variation-settings',
    'font-weight',
    'gap',
    'glyph-orientation-vertical',
    'grid',
    'grid-area',
    'grid-auto-columns',
    'grid-auto-flow',
    'grid-auto-rows',
    'grid-column',
    'grid-column-end',
    'grid-column-start',
    'grid-gap',
    'grid-row',
    'grid-row-end',
    'grid-row-start',
    'grid-template',
    'grid-template-areas',
    'grid-template-columns',
    'grid-template-rows',
    'hanging-punctuation',
    'height',
    'hyphens',
    'icon',
    'image-orientation',
    'image-rendering',
    'image-resolution',
    'ime-mode',
    'inline-size',
    'isolation',
    'justify-content',
    'left',
    'letter-spacing',
    'line-break',
    'line-height',
    'list-style',
    'list-style-image',
    'list-style-position',
    'list-style-type',
    'margin',
    'margin-block',
    'margin-block-end',
    'margin-block-start',
    'margin-bottom',
    'margin-inline',
    'margin-inline-end',
    'margin-inline-start',
    'margin-left',
    'margin-right',
    'margin-top',
    'marks',
    'mask',
    'mask-border',
    'mask-border-mode',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-border-slice',
    'mask-border-source',
    'mask-border-width',
    'mask-clip',
    'mask-composite',
    'mask-image',
    'mask-mode',
    'mask-origin',
    'mask-position',
    'mask-repeat',
    'mask-size',
    'mask-type',
    'max-block-size',
    'max-height',
    'max-inline-size',
    'max-width',
    'min-block-size',
    'min-height',
    'min-inline-size',
    'min-width',
    'mix-blend-mode',
    'nav-down',
    'nav-index',
    'nav-left',
    'nav-right',
    'nav-up',
    'none',
    'normal',
    'object-fit',
    'object-position',
    'opacity',
    'order',
    'orphans',
    'outline',
    'outline-color',
    'outline-offset',
    'outline-style',
    'outline-width',
    'overflow',
    'overflow-wrap',
    'overflow-x',
    'overflow-y',
    'padding',
    'padding-block',
    'padding-block-end',
    'padding-block-start',
    'padding-bottom',
    'padding-inline',
    'padding-inline-end',
    'padding-inline-start',
    'padding-left',
    'padding-right',
    'padding-top',
    'page-break-after',
    'page-break-before',
    'page-break-inside',
    'pause',
    'pause-after',
    'pause-before',
    'perspective',
    'perspective-origin',
    'pointer-events',
    'position',
    'quotes',
    'resize',
    'rest',
    'rest-after',
    'rest-before',
    'right',
    'row-gap',
    'scroll-margin',
    'scroll-margin-block',
    'scroll-margin-block-end',
    'scroll-margin-block-start',
    'scroll-margin-bottom',
    'scroll-margin-inline',
    'scroll-margin-inline-end',
    'scroll-margin-inline-start',
    'scroll-margin-left',
    'scroll-margin-right',
    'scroll-margin-top',
    'scroll-padding',
    'scroll-padding-block',
    'scroll-padding-block-end',
    'scroll-padding-block-start',
    'scroll-padding-bottom',
    'scroll-padding-inline',
    'scroll-padding-inline-end',
    'scroll-padding-inline-start',
    'scroll-padding-left',
    'scroll-padding-right',
    'scroll-padding-top',
    'scroll-snap-align',
    'scroll-snap-stop',
    'scroll-snap-type',
    'scrollbar-color',
    'scrollbar-gutter',
    'scrollbar-width',
    'shape-image-threshold',
    'shape-margin',
    'shape-outside',
    'speak',
    'speak-as',
    'src',
    'tab-size',
    'table-layout',
    'text-align',
    'text-align-all',
    'text-align-last',
    'text-combine-upright',
    'text-decoration',
    'text-decoration-color',
    'text-decoration-line',
    'text-decoration-style',
    'text-emphasis',
    'text-emphasis-color',
    'text-emphasis-position',
    'text-emphasis-style',
    'text-indent',
    'text-justify',
    'text-orientation',
    'text-overflow',
    'text-rendering',
    'text-shadow',
    'text-transform',
    'text-underline-position',
    'top',
    'transform',
    'transform-box',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'unicode-bidi',
    'vertical-align',
    'visibility',
    'voice-balance',
    'voice-duration',
    'voice-family',
    'voice-pitch',
    'voice-range',
    'voice-rate',
    'voice-stress',
    'voice-volume',
    'white-space',
    'widows',
    'width',
    'will-change',
    'word-break',
    'word-spacing',
    'word-wrap',
    'writing-mode',
    'z-index',
  ].reverse();
function Ba(e) {
  const n = et(e),
    t = it,
    a = at,
    s = '@[a-z-]+',
    u = 'and or not only',
    i = { className: 'variable', begin: '(\\$' + '[a-zA-Z-][a-zA-Z0-9_-]*' + ')\\b', relevance: 0 };
  return {
    name: 'SCSS',
    case_insensitive: !0,
    illegal: "[=/|']",
    contains: [
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      n.CSS_NUMBER_MODE,
      { className: 'selector-id', begin: '#[A-Za-z0-9_-]+', relevance: 0 },
      { className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+', relevance: 0 },
      n.ATTRIBUTE_SELECTOR_MODE,
      { className: 'selector-tag', begin: '\\b(' + nt.join('|') + ')\\b', relevance: 0 },
      { className: 'selector-pseudo', begin: ':(' + a.join('|') + ')' },
      { className: 'selector-pseudo', begin: ':(:)?(' + t.join('|') + ')' },
      i,
      { begin: /\(/, end: /\)/, contains: [n.CSS_NUMBER_MODE] },
      n.CSS_VARIABLE,
      { className: 'attribute', begin: '\\b(' + rt.join('|') + ')\\b' },
      {
        begin:
          '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b',
      },
      {
        begin: /:/,
        end: /[;}{]/,
        relevance: 0,
        contains: [
          n.BLOCK_COMMENT,
          i,
          n.HEXCOLOR,
          n.CSS_NUMBER_MODE,
          e.QUOTE_STRING_MODE,
          e.APOS_STRING_MODE,
          n.IMPORTANT,
          n.FUNCTION_DISPATCH,
        ],
      },
      { begin: '@(page|font-face)', keywords: { $pattern: s, keyword: '@page @font-face' } },
      {
        begin: '@',
        end: '[{;]',
        returnBegin: !0,
        keywords: { $pattern: /[a-z-]+/, keyword: u, attribute: tt.join(' ') },
        contains: [
          { begin: s, className: 'keyword' },
          { begin: /[a-z-]+(?=:)/, className: 'attribute' },
          i,
          e.QUOTE_STRING_MODE,
          e.APOS_STRING_MODE,
          n.HEXCOLOR,
          n.CSS_NUMBER_MODE,
        ],
      },
      n.FUNCTION_DISPATCH,
    ],
  };
}
function Ua(e) {
  return {
    name: 'Shell Session',
    aliases: ['console', 'shellsession'],
    contains: [
      {
        className: 'meta.prompt',
        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
        starts: { end: /[^\\](?=\s*$)/, subLanguage: 'bash' },
      },
    ],
  };
}
function Pa(e) {
  const n = e.regex,
    t = e.COMMENT('--', '$'),
    a = { className: 'string', variants: [{ begin: /'/, end: /'/, contains: [{ begin: /''/ }] }] },
    s = { begin: /"/, end: /"/, contains: [{ begin: /""/ }] },
    u = ['true', 'false', 'unknown'],
    r = ['double precision', 'large object', 'with timezone', 'without timezone'],
    i = [
      'bigint',
      'binary',
      'blob',
      'boolean',
      'char',
      'character',
      'clob',
      'date',
      'dec',
      'decfloat',
      'decimal',
      'float',
      'int',
      'integer',
      'interval',
      'nchar',
      'nclob',
      'national',
      'numeric',
      'real',
      'row',
      'smallint',
      'time',
      'timestamp',
      'varchar',
      'varying',
      'varbinary',
    ],
    o = ['add', 'asc', 'collation', 'desc', 'final', 'first', 'last', 'view'],
    c = [
      'abs',
      'acos',
      'all',
      'allocate',
      'alter',
      'and',
      'any',
      'are',
      'array',
      'array_agg',
      'array_max_cardinality',
      'as',
      'asensitive',
      'asin',
      'asymmetric',
      'at',
      'atan',
      'atomic',
      'authorization',
      'avg',
      'begin',
      'begin_frame',
      'begin_partition',
      'between',
      'bigint',
      'binary',
      'blob',
      'boolean',
      'both',
      'by',
      'call',
      'called',
      'cardinality',
      'cascaded',
      'case',
      'cast',
      'ceil',
      'ceiling',
      'char',
      'char_length',
      'character',
      'character_length',
      'check',
      'classifier',
      'clob',
      'close',
      'coalesce',
      'collate',
      'collect',
      'column',
      'commit',
      'condition',
      'connect',
      'constraint',
      'contains',
      'convert',
      'copy',
      'corr',
      'corresponding',
      'cos',
      'cosh',
      'count',
      'covar_pop',
      'covar_samp',
      'create',
      'cross',
      'cube',
      'cume_dist',
      'current',
      'current_catalog',
      'current_date',
      'current_default_transform_group',
      'current_path',
      'current_role',
      'current_row',
      'current_schema',
      'current_time',
      'current_timestamp',
      'current_path',
      'current_role',
      'current_transform_group_for_type',
      'current_user',
      'cursor',
      'cycle',
      'date',
      'day',
      'deallocate',
      'dec',
      'decimal',
      'decfloat',
      'declare',
      'default',
      'define',
      'delete',
      'dense_rank',
      'deref',
      'describe',
      'deterministic',
      'disconnect',
      'distinct',
      'double',
      'drop',
      'dynamic',
      'each',
      'element',
      'else',
      'empty',
      'end',
      'end_frame',
      'end_partition',
      'end-exec',
      'equals',
      'escape',
      'every',
      'except',
      'exec',
      'execute',
      'exists',
      'exp',
      'external',
      'extract',
      'false',
      'fetch',
      'filter',
      'first_value',
      'float',
      'floor',
      'for',
      'foreign',
      'frame_row',
      'free',
      'from',
      'full',
      'function',
      'fusion',
      'get',
      'global',
      'grant',
      'group',
      'grouping',
      'groups',
      'having',
      'hold',
      'hour',
      'identity',
      'in',
      'indicator',
      'initial',
      'inner',
      'inout',
      'insensitive',
      'insert',
      'int',
      'integer',
      'intersect',
      'intersection',
      'interval',
      'into',
      'is',
      'join',
      'json_array',
      'json_arrayagg',
      'json_exists',
      'json_object',
      'json_objectagg',
      'json_query',
      'json_table',
      'json_table_primitive',
      'json_value',
      'lag',
      'language',
      'large',
      'last_value',
      'lateral',
      'lead',
      'leading',
      'left',
      'like',
      'like_regex',
      'listagg',
      'ln',
      'local',
      'localtime',
      'localtimestamp',
      'log',
      'log10',
      'lower',
      'match',
      'match_number',
      'match_recognize',
      'matches',
      'max',
      'member',
      'merge',
      'method',
      'min',
      'minute',
      'mod',
      'modifies',
      'module',
      'month',
      'multiset',
      'national',
      'natural',
      'nchar',
      'nclob',
      'new',
      'no',
      'none',
      'normalize',
      'not',
      'nth_value',
      'ntile',
      'null',
      'nullif',
      'numeric',
      'octet_length',
      'occurrences_regex',
      'of',
      'offset',
      'old',
      'omit',
      'on',
      'one',
      'only',
      'open',
      'or',
      'order',
      'out',
      'outer',
      'over',
      'overlaps',
      'overlay',
      'parameter',
      'partition',
      'pattern',
      'per',
      'percent',
      'percent_rank',
      'percentile_cont',
      'percentile_disc',
      'period',
      'portion',
      'position',
      'position_regex',
      'power',
      'precedes',
      'precision',
      'prepare',
      'primary',
      'procedure',
      'ptf',
      'range',
      'rank',
      'reads',
      'real',
      'recursive',
      'ref',
      'references',
      'referencing',
      'regr_avgx',
      'regr_avgy',
      'regr_count',
      'regr_intercept',
      'regr_r2',
      'regr_slope',
      'regr_sxx',
      'regr_sxy',
      'regr_syy',
      'release',
      'result',
      'return',
      'returns',
      'revoke',
      'right',
      'rollback',
      'rollup',
      'row',
      'row_number',
      'rows',
      'running',
      'savepoint',
      'scope',
      'scroll',
      'search',
      'second',
      'seek',
      'select',
      'sensitive',
      'session_user',
      'set',
      'show',
      'similar',
      'sin',
      'sinh',
      'skip',
      'smallint',
      'some',
      'specific',
      'specifictype',
      'sql',
      'sqlexception',
      'sqlstate',
      'sqlwarning',
      'sqrt',
      'start',
      'static',
      'stddev_pop',
      'stddev_samp',
      'submultiset',
      'subset',
      'substring',
      'substring_regex',
      'succeeds',
      'sum',
      'symmetric',
      'system',
      'system_time',
      'system_user',
      'table',
      'tablesample',
      'tan',
      'tanh',
      'then',
      'time',
      'timestamp',
      'timezone_hour',
      'timezone_minute',
      'to',
      'trailing',
      'translate',
      'translate_regex',
      'translation',
      'treat',
      'trigger',
      'trim',
      'trim_array',
      'true',
      'truncate',
      'uescape',
      'union',
      'unique',
      'unknown',
      'unnest',
      'update',
      'upper',
      'user',
      'using',
      'value',
      'values',
      'value_of',
      'var_pop',
      'var_samp',
      'varbinary',
      'varchar',
      'varying',
      'versioning',
      'when',
      'whenever',
      'where',
      'width_bucket',
      'window',
      'with',
      'within',
      'without',
      'year',
    ],
    l = [
      'abs',
      'acos',
      'array_agg',
      'asin',
      'atan',
      'avg',
      'cast',
      'ceil',
      'ceiling',
      'coalesce',
      'corr',
      'cos',
      'cosh',
      'count',
      'covar_pop',
      'covar_samp',
      'cume_dist',
      'dense_rank',
      'deref',
      'element',
      'exp',
      'extract',
      'first_value',
      'floor',
      'json_array',
      'json_arrayagg',
      'json_exists',
      'json_object',
      'json_objectagg',
      'json_query',
      'json_table',
      'json_table_primitive',
      'json_value',
      'lag',
      'last_value',
      'lead',
      'listagg',
      'ln',
      'log',
      'log10',
      'lower',
      'max',
      'min',
      'mod',
      'nth_value',
      'ntile',
      'nullif',
      'percent_rank',
      'percentile_cont',
      'percentile_disc',
      'position',
      'position_regex',
      'power',
      'rank',
      'regr_avgx',
      'regr_avgy',
      'regr_count',
      'regr_intercept',
      'regr_r2',
      'regr_slope',
      'regr_sxx',
      'regr_sxy',
      'regr_syy',
      'row_number',
      'sin',
      'sinh',
      'sqrt',
      'stddev_pop',
      'stddev_samp',
      'substring',
      'substring_regex',
      'sum',
      'tan',
      'tanh',
      'translate',
      'translate_regex',
      'treat',
      'trim',
      'trim_array',
      'unnest',
      'upper',
      'value_of',
      'var_pop',
      'var_samp',
      'width_bucket',
    ],
    _ = [
      'current_catalog',
      'current_date',
      'current_default_transform_group',
      'current_path',
      'current_role',
      'current_schema',
      'current_transform_group_for_type',
      'current_user',
      'session_user',
      'system_time',
      'system_user',
      'current_time',
      'localtime',
      'current_timestamp',
      'localtimestamp',
    ],
    b = [
      'create table',
      'insert into',
      'primary key',
      'foreign key',
      'not null',
      'alter table',
      'add constraint',
      'grouping sets',
      'on overflow',
      'character set',
      'respect nulls',
      'ignore nulls',
      'nulls first',
      'nulls last',
      'depth first',
      'breadth first',
    ],
    m = l,
    h = [...c, ...o].filter((R) => !l.includes(R)),
    y = { className: 'variable', begin: /@[a-z0-9][a-z0-9_]*/ },
    f = {
      className: 'operator',
      begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
      relevance: 0,
    },
    A = { begin: n.concat(/\b/, n.either(...m), /\s*\(/), relevance: 0, keywords: { built_in: m } };
  function k(R, { exceptions: S, when: x } = {}) {
    const v = x;
    return (
      (S = S || []), R.map((C) => (C.match(/\|\d+$/) || S.includes(C) ? C : v(C) ? `${C}|0` : C))
    );
  }
  return {
    name: 'SQL',
    case_insensitive: !0,
    illegal: /[{}]|<\//,
    keywords: {
      $pattern: /\b[\w\.]+/,
      keyword: k(h, { when: (R) => R.length < 3 }),
      literal: u,
      type: i,
      built_in: _,
    },
    contains: [
      {
        begin: n.either(...b),
        relevance: 0,
        keywords: { $pattern: /[\w\.]+/, keyword: h.concat(b), literal: u, type: i },
      },
      { className: 'type', begin: n.either(...r) },
      A,
      y,
      a,
      s,
      e.C_NUMBER_MODE,
      e.C_BLOCK_COMMENT_MODE,
      t,
      f,
    ],
  };
}
function ln(e) {
  return e ? (typeof e == 'string' ? e : e.source) : null;
}
function Te(e) {
  return L('(?=', e, ')');
}
function L(...e) {
  return e.map((t) => ln(t)).join('');
}
function st(e) {
  const n = e[e.length - 1];
  return typeof n == 'object' && n.constructor === Object ? (e.splice(e.length - 1, 1), n) : {};
}
function Z(...e) {
  return '(' + (st(e).capture ? '' : '?:') + e.map((a) => ln(a)).join('|') + ')';
}
const Ue = (e) => L(/\b/, e, /\w$/.test(e) ? /\b/ : /\B/),
  ot = ['Protocol', 'Type'].map(Ue),
  We = ['init', 'self'].map(Ue),
  ct = ['Any', 'Self'],
  xe = [
    'actor',
    'any',
    'associatedtype',
    'async',
    'await',
    /as\?/,
    /as!/,
    'as',
    'break',
    'case',
    'catch',
    'class',
    'continue',
    'convenience',
    'default',
    'defer',
    'deinit',
    'didSet',
    'distributed',
    'do',
    'dynamic',
    'else',
    'enum',
    'extension',
    'fallthrough',
    /fileprivate\(set\)/,
    'fileprivate',
    'final',
    'for',
    'func',
    'get',
    'guard',
    'if',
    'import',
    'indirect',
    'infix',
    /init\?/,
    /init!/,
    'inout',
    /internal\(set\)/,
    'internal',
    'in',
    'is',
    'isolated',
    'nonisolated',
    'lazy',
    'let',
    'mutating',
    'nonmutating',
    /open\(set\)/,
    'open',
    'operator',
    'optional',
    'override',
    'postfix',
    'precedencegroup',
    'prefix',
    /private\(set\)/,
    'private',
    'protocol',
    /public\(set\)/,
    'public',
    'repeat',
    'required',
    'rethrows',
    'return',
    'set',
    'some',
    'static',
    'struct',
    'subscript',
    'super',
    'switch',
    'throws',
    'throw',
    /try\?/,
    /try!/,
    'try',
    'typealias',
    /unowned\(safe\)/,
    /unowned\(unsafe\)/,
    'unowned',
    'var',
    'weak',
    'where',
    'while',
    'willSet',
  ],
  Ye = ['false', 'nil', 'true'],
  lt = ['assignment', 'associativity', 'higherThan', 'left', 'lowerThan', 'none', 'right'],
  dt = [
    '#colorLiteral',
    '#column',
    '#dsohandle',
    '#else',
    '#elseif',
    '#endif',
    '#error',
    '#file',
    '#fileID',
    '#fileLiteral',
    '#filePath',
    '#function',
    '#if',
    '#imageLiteral',
    '#keyPath',
    '#line',
    '#selector',
    '#sourceLocation',
    '#warn_unqualified_access',
    '#warning',
  ],
  Ze = [
    'abs',
    'all',
    'any',
    'assert',
    'assertionFailure',
    'debugPrint',
    'dump',
    'fatalError',
    'getVaList',
    'isKnownUniquelyReferenced',
    'max',
    'min',
    'numericCast',
    'pointwiseMax',
    'pointwiseMin',
    'precondition',
    'preconditionFailure',
    'print',
    'readLine',
    'repeatElement',
    'sequence',
    'stride',
    'swap',
    'swift_unboxFromSwiftValueWithType',
    'transcode',
    'type',
    'unsafeBitCast',
    'unsafeDowncast',
    'withExtendedLifetime',
    'withUnsafeMutablePointer',
    'withUnsafePointer',
    'withVaList',
    'withoutActuallyEscaping',
    'zip',
  ],
  dn = Z(
    /[/=\-+!*%<>&|^~?]/,
    /[\u00A1-\u00A7]/,
    /[\u00A9\u00AB]/,
    /[\u00AC\u00AE]/,
    /[\u00B0\u00B1]/,
    /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
    /[\u2016-\u2017]/,
    /[\u2020-\u2027]/,
    /[\u2030-\u203E]/,
    /[\u2041-\u2053]/,
    /[\u2055-\u205E]/,
    /[\u2190-\u23FF]/,
    /[\u2500-\u2775]/,
    /[\u2794-\u2BFF]/,
    /[\u2E00-\u2E7F]/,
    /[\u3001-\u3003]/,
    /[\u3008-\u3020]/,
    /[\u3030]/,
  ),
  un = Z(
    dn,
    /[\u0300-\u036F]/,
    /[\u1DC0-\u1DFF]/,
    /[\u20D0-\u20FF]/,
    /[\uFE00-\uFE0F]/,
    /[\uFE20-\uFE2F]/,
  ),
  De = L(dn, un, '*'),
  gn = Z(
    /[a-zA-Z_]/,
    /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
    /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
    /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
    /[\u1E00-\u1FFF]/,
    /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
    /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
    /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
    /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
    /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
    /[\uFE47-\uFEFE\uFF00-\uFFFD]/,
  ),
  Oe = Z(gn, /\d/, /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/),
  ne = L(gn, Oe, '*'),
  Le = L(/[A-Z]/, Oe, '*'),
  ut = [
    'autoclosure',
    L(/convention\(/, Z('swift', 'block', 'c'), /\)/),
    'discardableResult',
    'dynamicCallable',
    'dynamicMemberLookup',
    'escaping',
    'frozen',
    'GKInspectable',
    'IBAction',
    'IBDesignable',
    'IBInspectable',
    'IBOutlet',
    'IBSegueAction',
    'inlinable',
    'main',
    'nonobjc',
    'NSApplicationMain',
    'NSCopying',
    'NSManaged',
    L(/objc\(/, ne, /\)/),
    'objc',
    'objcMembers',
    'propertyWrapper',
    'requires_stored_property_inits',
    'resultBuilder',
    'testable',
    'UIApplicationMain',
    'unknown',
    'usableFromInline',
  ],
  gt = [
    'iOS',
    'iOSApplicationExtension',
    'macOS',
    'macOSApplicationExtension',
    'macCatalyst',
    'macCatalystApplicationExtension',
    'watchOS',
    'watchOSApplicationExtension',
    'tvOS',
    'tvOSApplicationExtension',
    'swift',
  ];
function Fa(e) {
  const n = { match: /\s+/, relevance: 0 },
    t = e.COMMENT('/\\*', '\\*/', { contains: ['self'] }),
    a = [e.C_LINE_COMMENT_MODE, t],
    s = { match: [/\./, Z(...ot, ...We)], className: { 2: 'keyword' } },
    u = { match: L(/\./, Z(...xe)), relevance: 0 },
    r = xe.filter((D) => typeof D == 'string').concat(['_|0']),
    i = xe
      .filter((D) => typeof D != 'string')
      .concat(ct)
      .map(Ue),
    o = { variants: [{ className: 'keyword', match: Z(...i, ...We) }] },
    c = { $pattern: Z(/\b\w+/, /#\w+/), keyword: r.concat(dt), literal: Ye },
    l = [s, u, o],
    _ = { match: L(/\./, Z(...Ze)), relevance: 0 },
    b = { className: 'built_in', match: L(/\b/, Z(...Ze), /(?=\()/) },
    m = [_, b],
    h = { match: /->/, relevance: 0 },
    y = {
      className: 'operator',
      relevance: 0,
      variants: [{ match: De }, { match: `\\.(\\.|${un})+` }],
    },
    f = [h, y],
    A = '([0-9]_*)+',
    k = '([0-9a-fA-F]_*)+',
    R = {
      className: 'number',
      relevance: 0,
      variants: [
        { match: `\\b(${A})(\\.(${A}))?([eE][+-]?(${A}))?\\b` },
        { match: `\\b0x(${k})(\\.(${k}))?([pP][+-]?(${A}))?\\b` },
        { match: /\b0o([0-7]_*)+\b/ },
        { match: /\b0b([01]_*)+\b/ },
      ],
    },
    S = (D = '') => ({
      className: 'subst',
      variants: [
        { match: L(/\\/, D, /[0\\tnr"']/) },
        { match: L(/\\/, D, /u\{[0-9a-fA-F]{1,8}\}/) },
      ],
    }),
    x = (D = '') => ({ className: 'subst', match: L(/\\/, D, /[\t ]*(?:[\r\n]|\r\n)/) }),
    v = (D = '') => ({ className: 'subst', label: 'interpol', begin: L(/\\/, D, /\(/), end: /\)/ }),
    C = (D = '') => ({ begin: L(D, /"""/), end: L(/"""/, D), contains: [S(D), x(D), v(D)] }),
    F = (D = '') => ({ begin: L(D, /"/), end: L(/"/, D), contains: [S(D), v(D)] }),
    U = {
      className: 'string',
      variants: [C(), C('#'), C('##'), C('###'), F(), F('#'), F('##'), F('###')],
    },
    Y = { match: L(/`/, ne, /`/) },
    X = { className: 'variable', match: /\$\d+/ },
    J = { className: 'variable', match: `\\$${Oe}+` },
    z = [Y, X, J],
    $ = {
      match: /(@|#(un)?)available/,
      className: 'keyword',
      starts: { contains: [{ begin: /\(/, end: /\)/, keywords: gt, contains: [...f, R, U] }] },
    },
    G = { className: 'keyword', match: L(/@/, Z(...ut)) },
    j = { className: 'meta', match: L(/@/, ne) },
    d = [$, G, j],
    g = {
      match: Te(/\b[A-Z]/),
      relevance: 0,
      contains: [
        {
          className: 'type',
          match: L(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, Oe, '+'),
        },
        { className: 'type', match: Le, relevance: 0 },
        { match: /[?!]+/, relevance: 0 },
        { match: /\.\.\./, relevance: 0 },
        { match: L(/\s+&\s+/, Te(Le)), relevance: 0 },
      ],
    },
    N = { begin: /</, end: />/, keywords: c, contains: [...a, ...l, ...d, h, g] };
  g.contains.push(N);
  const w = { match: L(ne, /\s*:/), keywords: '_|0', relevance: 0 },
    M = {
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: c,
      contains: ['self', w, ...a, ...l, ...m, ...f, R, U, ...z, ...d, g],
    },
    P = { begin: /</, end: />/, contains: [...a, g] },
    H = {
      begin: Z(Te(L(ne, /\s*:/)), Te(L(ne, /\s+/, ne, /\s*:/))),
      end: /:/,
      relevance: 0,
      contains: [
        { className: 'keyword', match: /\b_\b/ },
        { className: 'params', match: ne },
      ],
    },
    ae = {
      begin: /\(/,
      end: /\)/,
      keywords: c,
      contains: [H, ...a, ...l, ...f, R, U, ...d, g, M],
      endsParent: !0,
      illegal: /["']/,
    },
    W = {
      match: [/func/, /\s+/, Z(Y.match, ne, De)],
      className: { 1: 'keyword', 3: 'title.function' },
      contains: [P, ae, n],
      illegal: [/\[/, /%/],
    },
    V = {
      match: [/\b(?:subscript|init[?!]?)/, /\s*(?=[<(])/],
      className: { 1: 'keyword' },
      contains: [P, ae, n],
      illegal: /\[|%/,
    },
    be = { match: [/operator/, /\s+/, De], className: { 1: 'keyword', 3: 'title' } },
    pe = {
      begin: [/precedencegroup/, /\s+/, Le],
      className: { 1: 'keyword', 3: 'title' },
      contains: [g],
      keywords: [...lt, ...Ye],
      end: /}/,
    };
  for (const D of U.variants) {
    const _e = D.contains.find((Me) => Me.label === 'interpol');
    _e.keywords = c;
    const me = [...l, ...m, ...f, R, U, ...z];
    _e.contains = [...me, { begin: /\(/, end: /\)/, contains: ['self', ...me] }];
  }
  return {
    name: 'Swift',
    keywords: c,
    contains: [
      ...a,
      W,
      V,
      {
        beginKeywords: 'struct protocol class extension enum actor',
        end: '\\{',
        excludeEnd: !0,
        keywords: c,
        contains: [
          e.inherit(e.TITLE_MODE, {
            className: 'title.class',
            begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/,
          }),
          ...l,
        ],
      },
      be,
      pe,
      { beginKeywords: 'import', end: /$/, contains: [...a], relevance: 0 },
      ...l,
      ...m,
      ...f,
      R,
      U,
      ...z,
      ...d,
      g,
      M,
    ],
  };
}
const Re = '[A-Za-z$_][0-9A-Za-z$_]*',
  bn = [
    'as',
    'in',
    'of',
    'if',
    'for',
    'while',
    'finally',
    'var',
    'new',
    'function',
    'do',
    'return',
    'void',
    'else',
    'break',
    'catch',
    'instanceof',
    'with',
    'throw',
    'case',
    'default',
    'try',
    'switch',
    'continue',
    'typeof',
    'delete',
    'let',
    'yield',
    'const',
    'class',
    'debugger',
    'async',
    'await',
    'static',
    'import',
    'from',
    'export',
    'extends',
  ],
  pn = ['true', 'false', 'null', 'undefined', 'NaN', 'Infinity'],
  _n = [
    'Object',
    'Function',
    'Boolean',
    'Symbol',
    'Math',
    'Date',
    'Number',
    'BigInt',
    'String',
    'RegExp',
    'Array',
    'Float32Array',
    'Float64Array',
    'Int8Array',
    'Uint8Array',
    'Uint8ClampedArray',
    'Int16Array',
    'Int32Array',
    'Uint16Array',
    'Uint32Array',
    'BigInt64Array',
    'BigUint64Array',
    'Set',
    'Map',
    'WeakSet',
    'WeakMap',
    'ArrayBuffer',
    'SharedArrayBuffer',
    'Atomics',
    'DataView',
    'JSON',
    'Promise',
    'Generator',
    'GeneratorFunction',
    'AsyncFunction',
    'Reflect',
    'Proxy',
    'Intl',
    'WebAssembly',
  ],
  mn = [
    'Error',
    'EvalError',
    'InternalError',
    'RangeError',
    'ReferenceError',
    'SyntaxError',
    'TypeError',
    'URIError',
  ],
  En = [
    'setInterval',
    'setTimeout',
    'clearInterval',
    'clearTimeout',
    'require',
    'exports',
    'eval',
    'isFinite',
    'isNaN',
    'parseFloat',
    'parseInt',
    'decodeURI',
    'decodeURIComponent',
    'encodeURI',
    'encodeURIComponent',
    'escape',
    'unescape',
  ],
  fn = [
    'arguments',
    'this',
    'super',
    'console',
    'window',
    'document',
    'localStorage',
    'sessionStorage',
    'module',
    'global',
  ],
  Nn = [].concat(En, _n, mn);
function bt(e) {
  const n = e.regex,
    t = (g, { after: N }) => {
      const w = '</' + g[0].slice(1);
      return g.input.indexOf(w, N) !== -1;
    },
    a = Re,
    s = { begin: '<>', end: '</>' },
    u = /<[A-Za-z0-9\\._:-]+\s*\/>/,
    r = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      isTrulyOpeningTag: (g, N) => {
        const w = g[0].length + g.index,
          M = g.input[w];
        if (M === '<' || M === ',') {
          N.ignoreMatch();
          return;
        }
        M === '>' && (t(g, { after: w }) || N.ignoreMatch());
        let P;
        const H = g.input.substring(w);
        if ((P = H.match(/^\s*=/))) {
          N.ignoreMatch();
          return;
        }
        if ((P = H.match(/^\s+extends\s+/)) && P.index === 0) {
          N.ignoreMatch();
          return;
        }
      },
    },
    i = { $pattern: Re, keyword: bn, literal: pn, built_in: Nn, 'variable.language': fn },
    o = '[0-9](_?[0-9])*',
    c = `\\.(${o})`,
    l = '0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*',
    _ = {
      className: 'number',
      variants: [
        { begin: `(\\b(${l})((${c})|\\.)?|(${c}))[eE][+-]?(${o})\\b` },
        { begin: `\\b(${l})\\b((${c})\\b|\\.)?|(${c})\\b` },
        { begin: '\\b(0|[1-9](_?[0-9])*)n\\b' },
        { begin: '\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b' },
        { begin: '\\b0[bB][0-1](_?[0-1])*n?\\b' },
        { begin: '\\b0[oO][0-7](_?[0-7])*n?\\b' },
        { begin: '\\b0[0-7]+n?\\b' },
      ],
      relevance: 0,
    },
    b = { className: 'subst', begin: '\\$\\{', end: '\\}', keywords: i, contains: [] },
    m = {
      begin: 'html`',
      end: '',
      starts: { end: '`', returnEnd: !1, contains: [e.BACKSLASH_ESCAPE, b], subLanguage: 'xml' },
    },
    h = {
      begin: 'css`',
      end: '',
      starts: { end: '`', returnEnd: !1, contains: [e.BACKSLASH_ESCAPE, b], subLanguage: 'css' },
    },
    y = {
      begin: 'gql`',
      end: '',
      starts: {
        end: '`',
        returnEnd: !1,
        contains: [e.BACKSLASH_ESCAPE, b],
        subLanguage: 'graphql',
      },
    },
    f = { className: 'string', begin: '`', end: '`', contains: [e.BACKSLASH_ESCAPE, b] },
    k = {
      className: 'comment',
      variants: [
        e.COMMENT(/\/\*\*(?!\/)/, '\\*/', {
          relevance: 0,
          contains: [
            {
              begin: '(?=@[A-Za-z]+)',
              relevance: 0,
              contains: [
                { className: 'doctag', begin: '@[A-Za-z]+' },
                {
                  className: 'type',
                  begin: '\\{',
                  end: '\\}',
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0,
                },
                { className: 'variable', begin: a + '(?=\\s*(-)|$)', endsParent: !0, relevance: 0 },
                { begin: /(?=[^\n])\s/, relevance: 0 },
              ],
            },
          ],
        }),
        e.C_BLOCK_COMMENT_MODE,
        e.C_LINE_COMMENT_MODE,
      ],
    },
    R = [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, m, h, y, f, { match: /\$\d+/ }, _];
  b.contains = R.concat({ begin: /\{/, end: /\}/, keywords: i, contains: ['self'].concat(R) });
  const S = [].concat(k, b.contains),
    x = S.concat([{ begin: /\(/, end: /\)/, keywords: i, contains: ['self'].concat(S) }]),
    v = {
      className: 'params',
      begin: /\(/,
      end: /\)/,
      excludeBegin: !0,
      excludeEnd: !0,
      keywords: i,
      contains: x,
    },
    C = {
      variants: [
        {
          match: [
            /class/,
            /\s+/,
            a,
            /\s+/,
            /extends/,
            /\s+/,
            n.concat(a, '(', n.concat(/\./, a), ')*'),
          ],
          scope: { 1: 'keyword', 3: 'title.class', 5: 'keyword', 7: 'title.class.inherited' },
        },
        { match: [/class/, /\s+/, a], scope: { 1: 'keyword', 3: 'title.class' } },
      ],
    },
    F = {
      relevance: 0,
      match: n.either(
        /\bJSON/,
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
      ),
      className: 'title.class',
      keywords: { _: [..._n, ...mn] },
    },
    U = {
      label: 'use_strict',
      className: 'meta',
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/,
    },
    Y = {
      variants: [
        { match: [/function/, /\s+/, a, /(?=\s*\()/] },
        { match: [/function/, /\s*(?=\()/] },
      ],
      className: { 1: 'keyword', 3: 'title.function' },
      label: 'func.def',
      contains: [v],
      illegal: /%/,
    },
    X = { relevance: 0, match: /\b[A-Z][A-Z_0-9]+\b/, className: 'variable.constant' };
  function J(g) {
    return n.concat('(?!', g.join('|'), ')');
  }
  const z = {
      match: n.concat(/\b/, J([...En, 'super', 'import']), a, n.lookahead(/\(/)),
      className: 'title.function',
      relevance: 0,
    },
    $ = {
      begin: n.concat(/\./, n.lookahead(n.concat(a, /(?![0-9A-Za-z$_(])/))),
      end: a,
      excludeBegin: !0,
      keywords: 'prototype',
      className: 'property',
      relevance: 0,
    },
    G = {
      match: [/get|set/, /\s+/, a, /(?=\()/],
      className: { 1: 'keyword', 3: 'title.function' },
      contains: [{ begin: /\(\)/ }, v],
    },
    j =
      '(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|' +
      e.UNDERSCORE_IDENT_RE +
      ')\\s*=>',
    d = {
      match: [/const|var|let/, /\s+/, a, /\s*/, /=\s*/, /(async\s*)?/, n.lookahead(j)],
      keywords: 'async',
      className: { 1: 'keyword', 3: 'title.function' },
      contains: [v],
    };
  return {
    name: 'JavaScript',
    aliases: ['js', 'jsx', 'mjs', 'cjs'],
    keywords: i,
    exports: { PARAMS_CONTAINS: x, CLASS_REFERENCE: F },
    illegal: /#(?![$_A-z])/,
    contains: [
      e.SHEBANG({ label: 'shebang', binary: 'node', relevance: 5 }),
      U,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      m,
      h,
      y,
      f,
      k,
      { match: /\$\d+/ },
      _,
      F,
      { className: 'attr', begin: a + n.lookahead(':'), relevance: 0 },
      d,
      {
        begin: '(' + e.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
        keywords: 'return throw case',
        relevance: 0,
        contains: [
          k,
          e.REGEXP_MODE,
          {
            className: 'function',
            begin: j,
            returnBegin: !0,
            end: '\\s*=>',
            contains: [
              {
                className: 'params',
                variants: [
                  { begin: e.UNDERSCORE_IDENT_RE, relevance: 0 },
                  { className: null, begin: /\(\s*\)/, skip: !0 },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: i,
                    contains: x,
                  },
                ],
              },
            ],
          },
          { begin: /,/, relevance: 0 },
          { match: /\s+/, relevance: 0 },
          {
            variants: [
              { begin: s.begin, end: s.end },
              { match: u },
              { begin: r.begin, 'on:begin': r.isTrulyOpeningTag, end: r.end },
            ],
            subLanguage: 'xml',
            contains: [{ begin: r.begin, end: r.end, skip: !0, contains: ['self'] }],
          },
        ],
      },
      Y,
      { beginKeywords: 'while if switch catch for' },
      {
        begin:
          '\\b(?!function)' +
          e.UNDERSCORE_IDENT_RE +
          '\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{',
        returnBegin: !0,
        label: 'func.def',
        contains: [v, e.inherit(e.TITLE_MODE, { begin: a, className: 'title.function' })],
      },
      { match: /\.\.\./, relevance: 0 },
      $,
      { match: '\\$' + a, relevance: 0 },
      { match: [/\bconstructor(?=\s*\()/], className: { 1: 'title.function' }, contains: [v] },
      z,
      X,
      C,
      G,
      { match: /\$[(.]/ },
    ],
  };
}
function $a(e) {
  const n = bt(e),
    t = Re,
    a = [
      'any',
      'void',
      'number',
      'boolean',
      'string',
      'object',
      'never',
      'symbol',
      'bigint',
      'unknown',
    ],
    s = {
      beginKeywords: 'namespace',
      end: /\{/,
      excludeEnd: !0,
      contains: [n.exports.CLASS_REFERENCE],
    },
    u = {
      beginKeywords: 'interface',
      end: /\{/,
      excludeEnd: !0,
      keywords: { keyword: 'interface extends', built_in: a },
      contains: [n.exports.CLASS_REFERENCE],
    },
    r = { className: 'meta', relevance: 10, begin: /^\s*['"]use strict['"]/ },
    i = [
      'type',
      'namespace',
      'interface',
      'public',
      'private',
      'protected',
      'implements',
      'declare',
      'abstract',
      'readonly',
      'enum',
      'override',
    ],
    o = {
      $pattern: Re,
      keyword: bn.concat(i),
      literal: pn,
      built_in: Nn.concat(a),
      'variable.language': fn,
    },
    c = { className: 'meta', begin: '@' + t },
    l = (b, m, h) => {
      const y = b.contains.findIndex((f) => f.label === m);
      if (y === -1) throw new Error('can not find mode to replace');
      b.contains.splice(y, 1, h);
    };
  Object.assign(n.keywords, o),
    n.exports.PARAMS_CONTAINS.push(c),
    (n.contains = n.contains.concat([c, s, u])),
    l(n, 'shebang', e.SHEBANG()),
    l(n, 'use_strict', r);
  const _ = n.contains.find((b) => b.label === 'func.def');
  return (
    (_.relevance = 0),
    Object.assign(n, { name: 'TypeScript', aliases: ['ts', 'tsx', 'mts', 'cts'] }),
    n
  );
}
function za(e) {
  const n = e.regex,
    t = { className: 'string', begin: /"(""|[^/n])"C\b/ },
    a = { className: 'string', begin: /"/, end: /"/, illegal: /\n/, contains: [{ begin: /""/ }] },
    s = /\d{1,2}\/\d{1,2}\/\d{4}/,
    u = /\d{4}-\d{1,2}-\d{1,2}/,
    r = /(\d|1[012])(:\d+){0,2} *(AM|PM)/,
    i = /\d{1,2}(:\d{1,2}){1,2}/,
    o = {
      className: 'literal',
      variants: [
        { begin: n.concat(/# */, n.either(u, s), / *#/) },
        { begin: n.concat(/# */, i, / *#/) },
        { begin: n.concat(/# */, r, / *#/) },
        { begin: n.concat(/# */, n.either(u, s), / +/, n.either(r, i), / *#/) },
      ],
    },
    c = {
      className: 'number',
      relevance: 0,
      variants: [
        { begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/ },
        { begin: /\b\d[\d_]*((U?[SIL])|[%&])?/ },
        { begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/ },
        { begin: /&O[0-7_]+((U?[SIL])|[%&])?/ },
        { begin: /&B[01_]+((U?[SIL])|[%&])?/ },
      ],
    },
    l = { className: 'label', begin: /^\w+:/ },
    _ = e.COMMENT(/'''/, /$/, { contains: [{ className: 'doctag', begin: /<\/?/, end: />/ }] }),
    b = e.COMMENT(null, /$/, { variants: [{ begin: /'/ }, { begin: /([\t ]|^)REM(?=\s)/ }] });
  return {
    name: 'Visual Basic .NET',
    aliases: ['vb'],
    case_insensitive: !0,
    classNameAliases: { label: 'symbol' },
    keywords: {
      keyword:
        'addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield',
      built_in:
        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',
      type: 'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',
      literal: 'true false nothing',
    },
    illegal: '//|\\{|\\}|endif|gosub|variant|wend|^\\$ ',
    contains: [
      t,
      a,
      o,
      c,
      l,
      _,
      b,
      {
        className: 'meta',
        begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
        end: /$/,
        keywords: { keyword: 'const disable else elseif enable end externalsource if region then' },
        contains: [b],
      },
    ],
  };
}
function Ka(e) {
  e.regex;
  const n = e.COMMENT(/\(;/, /;\)/);
  n.contains.push('self');
  const t = e.COMMENT(/;;/, /$/),
    a = [
      'anyfunc',
      'block',
      'br',
      'br_if',
      'br_table',
      'call',
      'call_indirect',
      'data',
      'drop',
      'elem',
      'else',
      'end',
      'export',
      'func',
      'global.get',
      'global.set',
      'local.get',
      'local.set',
      'local.tee',
      'get_global',
      'get_local',
      'global',
      'if',
      'import',
      'local',
      'loop',
      'memory',
      'memory.grow',
      'memory.size',
      'module',
      'mut',
      'nop',
      'offset',
      'param',
      'result',
      'return',
      'select',
      'set_global',
      'set_local',
      'start',
      'table',
      'tee_local',
      'then',
      'type',
      'unreachable',
    ],
    s = {
      begin: [/(?:func|call|call_indirect)/, /\s+/, /\$[^\s)]+/],
      className: { 1: 'keyword', 3: 'title.function' },
    },
    u = { className: 'variable', begin: /\$[\w_]+/ },
    r = { match: /(\((?!;)|\))+/, className: 'punctuation', relevance: 0 },
    i = {
      className: 'number',
      relevance: 0,
      match:
        /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,
    },
    o = { match: /(i32|i64|f32|f64)(?!\.)/, className: 'type' },
    c = {
      className: 'keyword',
      match:
        /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/,
    };
  return {
    name: 'WebAssembly',
    keywords: { $pattern: /[\w.]+/, keyword: a },
    contains: [
      t,
      n,
      { match: [/(?:offset|align)/, /\s*/, /=/], className: { 1: 'keyword', 3: 'operator' } },
      u,
      r,
      s,
      e.QUOTE_STRING_MODE,
      o,
      c,
      i,
    ],
  };
}
function Ga(e) {
  const n = e.regex,
    t = n.concat(/[\p{L}_]/u, n.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u),
    a = /[\p{L}0-9._:-]+/u,
    s = { className: 'symbol', begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/ },
    u = {
      begin: /\s/,
      contains: [{ className: 'keyword', begin: /#?[a-z_][a-z1-9_-]+/, illegal: /\n/ }],
    },
    r = e.inherit(u, { begin: /\(/, end: /\)/ }),
    i = e.inherit(e.APOS_STRING_MODE, { className: 'string' }),
    o = e.inherit(e.QUOTE_STRING_MODE, { className: 'string' }),
    c = {
      endsWithParent: !0,
      illegal: /</,
      relevance: 0,
      contains: [
        { className: 'attr', begin: a, relevance: 0 },
        {
          begin: /=\s*/,
          relevance: 0,
          contains: [
            {
              className: 'string',
              endsParent: !0,
              variants: [
                { begin: /"/, end: /"/, contains: [s] },
                { begin: /'/, end: /'/, contains: [s] },
                { begin: /[^\s"'=<>`]+/ },
              ],
            },
          ],
        },
      ],
    };
  return {
    name: 'HTML, XML',
    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist', 'wsf', 'svg'],
    case_insensitive: !0,
    unicodeRegex: !0,
    contains: [
      {
        className: 'meta',
        begin: /<![a-z]/,
        end: />/,
        relevance: 10,
        contains: [
          u,
          o,
          i,
          r,
          {
            begin: /\[/,
            end: /\]/,
            contains: [{ className: 'meta', begin: /<![a-z]/, end: />/, contains: [u, r, o, i] }],
          },
        ],
      },
      e.COMMENT(/<!--/, /-->/, { relevance: 10 }),
      { begin: /<!\[CDATA\[/, end: /\]\]>/, relevance: 10 },
      s,
      {
        className: 'meta',
        end: /\?>/,
        variants: [
          { begin: /<\?xml/, relevance: 10, contains: [o] },
          { begin: /<\?[a-z][a-z0-9]+/ },
        ],
      },
      {
        className: 'tag',
        begin: /<style(?=\s|>)/,
        end: />/,
        keywords: { name: 'style' },
        contains: [c],
        starts: { end: /<\/style>/, returnEnd: !0, subLanguage: ['css', 'xml'] },
      },
      {
        className: 'tag',
        begin: /<script(?=\s|>)/,
        end: />/,
        keywords: { name: 'script' },
        contains: [c],
        starts: {
          end: /<\/script>/,
          returnEnd: !0,
          subLanguage: ['javascript', 'handlebars', 'xml'],
        },
      },
      { className: 'tag', begin: /<>|<\/>/ },
      {
        className: 'tag',
        begin: n.concat(/</, n.lookahead(n.concat(t, n.either(/\/>/, />/, /\s/)))),
        end: /\/?>/,
        contains: [{ className: 'name', begin: t, relevance: 0, starts: c }],
      },
      {
        className: 'tag',
        begin: n.concat(/<\//, n.lookahead(n.concat(t, />/))),
        contains: [
          { className: 'name', begin: t, relevance: 0 },
          { begin: />/, relevance: 0, endsParent: !0 },
        ],
      },
    ],
  };
}
function Ha(e) {
  const n = 'true false yes no null',
    t = "[\\w#;/?:@&=+$,.~*'()[\\]]+",
    a = {
      className: 'attr',
      variants: [
        { begin: '\\w[\\w :\\/.-]*:(?=[ 	]|$)' },
        { begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)' },
        { begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)" },
      ],
    },
    s = {
      className: 'template-variable',
      variants: [
        { begin: /\{\{/, end: /\}\}/ },
        { begin: /%\{/, end: /\}/ },
      ],
    },
    u = {
      className: 'string',
      relevance: 0,
      variants: [{ begin: /'/, end: /'/ }, { begin: /"/, end: /"/ }, { begin: /\S+/ }],
      contains: [e.BACKSLASH_ESCAPE, s],
    },
    r = e.inherit(u, {
      variants: [{ begin: /'/, end: /'/ }, { begin: /"/, end: /"/ }, { begin: /[^\s,{}[\]]+/ }],
    }),
    _ = {
      className: 'number',
      begin:
        '\\b' +
        '[0-9]{4}(-[0-9][0-9]){0,2}' +
        '([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?' +
        '(\\.[0-9]*)?' +
        '([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?' +
        '\\b',
    },
    b = { end: ',', endsWithParent: !0, excludeEnd: !0, keywords: n, relevance: 0 },
    m = { begin: /\{/, end: /\}/, contains: [b], illegal: '\\n', relevance: 0 },
    h = { begin: '\\[', end: '\\]', contains: [b], illegal: '\\n', relevance: 0 },
    y = [
      a,
      { className: 'meta', begin: '^---\\s*$', relevance: 10 },
      {
        className: 'string',
        begin: '[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*',
      },
      {
        begin: '<%[%=-]?',
        end: '[%-]?%>',
        subLanguage: 'ruby',
        excludeBegin: !0,
        excludeEnd: !0,
        relevance: 0,
      },
      { className: 'type', begin: '!\\w+!' + t },
      { className: 'type', begin: '!<' + t + '>' },
      { className: 'type', begin: '!' + t },
      { className: 'type', begin: '!!' + t },
      { className: 'meta', begin: '&' + e.UNDERSCORE_IDENT_RE + '$' },
      { className: 'meta', begin: '\\*' + e.UNDERSCORE_IDENT_RE + '$' },
      { className: 'bullet', begin: '-(?=[ ]|$)', relevance: 0 },
      e.HASH_COMMENT_MODE,
      { beginKeywords: n, keywords: { literal: n } },
      _,
      { className: 'number', begin: e.C_NUMBER_RE + '\\b', relevance: 0 },
      m,
      h,
      u,
    ],
    f = [...y];
  return (
    f.pop(),
    f.push(r),
    (b.contains = f),
    { name: 'YAML', case_insensitive: !0, aliases: ['yml'], contains: y }
  );
}
function hn(e) {
  return (
    e instanceof Map
      ? (e.clear =
          e.delete =
          e.set =
            function () {
              throw new Error('map is read-only');
            })
      : e instanceof Set &&
        (e.add =
          e.clear =
          e.delete =
            function () {
              throw new Error('set is read-only');
            }),
    Object.freeze(e),
    Object.getOwnPropertyNames(e).forEach((n) => {
      const t = e[n],
        a = typeof t;
      (a === 'object' || a === 'function') && !Object.isFrozen(t) && hn(t);
    }),
    e
  );
}
class Ve {
  constructor(n) {
    n.data === void 0 && (n.data = {}), (this.data = n.data), (this.isMatchIgnored = !1);
  }
  ignoreMatch() {
    this.isMatchIgnored = !0;
  }
}
function yn(e) {
  return e
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;');
}
function te(e, ...n) {
  const t = Object.create(null);
  for (const a in e) t[a] = e[a];
  return (
    n.forEach(function (a) {
      for (const s in a) t[s] = a[s];
    }),
    t
  );
}
const pt = '</span>',
  Xe = (e) => !!e.scope,
  _t = (e, { prefix: n }) => {
    if (e.startsWith('language:')) return e.replace('language:', 'language-');
    if (e.includes('.')) {
      const t = e.split('.');
      return [`${n}${t.shift()}`, ...t.map((a, s) => `${a}${'_'.repeat(s + 1)}`)].join(' ');
    }
    return `${n}${e}`;
  };
class mt {
  constructor(n, t) {
    (this.buffer = ''), (this.classPrefix = t.classPrefix), n.walk(this);
  }
  addText(n) {
    this.buffer += yn(n);
  }
  openNode(n) {
    if (!Xe(n)) return;
    const t = _t(n.scope, { prefix: this.classPrefix });
    this.span(t);
  }
  closeNode(n) {
    Xe(n) && (this.buffer += pt);
  }
  value() {
    return this.buffer;
  }
  span(n) {
    this.buffer += `<span class="${n}">`;
  }
}
const Qe = (e = {}) => {
  const n = { children: [] };
  return Object.assign(n, e), n;
};
class Pe {
  constructor() {
    (this.rootNode = Qe()), (this.stack = [this.rootNode]);
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  add(n) {
    this.top.children.push(n);
  }
  openNode(n) {
    const t = Qe({ scope: n });
    this.add(t), this.stack.push(t);
  }
  closeNode() {
    if (this.stack.length > 1) return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); );
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  walk(n) {
    return this.constructor._walk(n, this.rootNode);
  }
  static _walk(n, t) {
    return (
      typeof t == 'string'
        ? n.addText(t)
        : t.children &&
          (n.openNode(t), t.children.forEach((a) => this._walk(n, a)), n.closeNode(t)),
      n
    );
  }
  static _collapse(n) {
    typeof n != 'string' &&
      n.children &&
      (n.children.every((t) => typeof t == 'string')
        ? (n.children = [n.children.join('')])
        : n.children.forEach((t) => {
            Pe._collapse(t);
          }));
  }
}
class Et extends Pe {
  constructor(n) {
    super(), (this.options = n);
  }
  addText(n) {
    n !== '' && this.add(n);
  }
  startScope(n) {
    this.openNode(n);
  }
  endScope() {
    this.closeNode();
  }
  __addSublanguage(n, t) {
    const a = n.root;
    t && (a.scope = `language:${t}`), this.add(a);
  }
  toHTML() {
    return new mt(this, this.options).value();
  }
  finalize() {
    return this.closeAllNodes(), !0;
  }
}
function ue(e) {
  return e ? (typeof e == 'string' ? e : e.source) : null;
}
function Sn(e) {
  return se('(?=', e, ')');
}
function ft(e) {
  return se('(?:', e, ')*');
}
function Nt(e) {
  return se('(?:', e, ')?');
}
function se(...e) {
  return e.map((t) => ue(t)).join('');
}
function ht(e) {
  const n = e[e.length - 1];
  return typeof n == 'object' && n.constructor === Object ? (e.splice(e.length - 1, 1), n) : {};
}
function Fe(...e) {
  return '(' + (ht(e).capture ? '' : '?:') + e.map((a) => ue(a)).join('|') + ')';
}
function Tn(e) {
  return new RegExp(e.toString() + '|').exec('').length - 1;
}
function yt(e, n) {
  const t = e && e.exec(n);
  return t && t.index === 0;
}
const St = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function $e(e, { joinWith: n }) {
  let t = 0;
  return e
    .map((a) => {
      t += 1;
      const s = t;
      let u = ue(a),
        r = '';
      for (; u.length > 0; ) {
        const i = St.exec(u);
        if (!i) {
          r += u;
          break;
        }
        (r += u.substring(0, i.index)),
          (u = u.substring(i.index + i[0].length)),
          i[0][0] === '\\' && i[1]
            ? (r += '\\' + String(Number(i[1]) + s))
            : ((r += i[0]), i[0] === '(' && t++);
      }
      return r;
    })
    .map((a) => `(${a})`)
    .join(n);
}
const Tt = /\b\B/,
  wn = '[a-zA-Z]\\w*',
  ze = '[a-zA-Z_]\\w*',
  On = '\\b\\d+(\\.\\d+)?',
  Rn = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)',
  An = '\\b(0b[01]+)',
  wt =
    '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~',
  Ot = (e = {}) => {
    const n = /^#![ ]*\//;
    return (
      e.binary && (e.begin = se(n, /.*\b/, e.binary, /\b.*/)),
      te(
        {
          scope: 'meta',
          begin: n,
          end: /$/,
          relevance: 0,
          'on:begin': (t, a) => {
            t.index !== 0 && a.ignoreMatch();
          },
        },
        e,
      )
    );
  },
  ge = { begin: '\\\\[\\s\\S]', relevance: 0 },
  Rt = { scope: 'string', begin: "'", end: "'", illegal: '\\n', contains: [ge] },
  At = { scope: 'string', begin: '"', end: '"', illegal: '\\n', contains: [ge] },
  vt = {
    begin:
      /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/,
  },
  ve = function (e, n, t = {}) {
    const a = te({ scope: 'comment', begin: e, end: n, contains: [] }, t);
    a.contains.push({
      scope: 'doctag',
      begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',
      end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
      excludeBegin: !0,
      relevance: 0,
    });
    const s = Fe(
      'I',
      'a',
      'is',
      'so',
      'us',
      'to',
      'at',
      'if',
      'in',
      'it',
      'on',
      /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
      /[A-Za-z]+[-][a-z]+/,
      /[A-Za-z][a-z]{2,}/,
    );
    return a.contains.push({ begin: se(/[ ]+/, '(', s, /[.]?[:]?([.][ ]|[ ])/, '){3}') }), a;
  },
  Mt = ve('//', '$'),
  It = ve('/\\*', '\\*/'),
  Ct = ve('#', '$'),
  kt = { scope: 'number', begin: On, relevance: 0 },
  xt = { scope: 'number', begin: Rn, relevance: 0 },
  Dt = { scope: 'number', begin: An, relevance: 0 },
  Lt = {
    begin: /(?=\/[^/\n]*\/)/,
    contains: [
      {
        scope: 'regexp',
        begin: /\//,
        end: /\/[gimuy]*/,
        illegal: /\n/,
        contains: [ge, { begin: /\[/, end: /\]/, relevance: 0, contains: [ge] }],
      },
    ],
  },
  Bt = { scope: 'title', begin: wn, relevance: 0 },
  Ut = { scope: 'title', begin: ze, relevance: 0 },
  Pt = { begin: '\\.\\s*' + ze, relevance: 0 },
  Ft = function (e) {
    return Object.assign(e, {
      'on:begin': (n, t) => {
        t.data._beginMatch = n[1];
      },
      'on:end': (n, t) => {
        t.data._beginMatch !== n[1] && t.ignoreMatch();
      },
    });
  };
var we = Object.freeze({
  __proto__: null,
  MATCH_NOTHING_RE: Tt,
  IDENT_RE: wn,
  UNDERSCORE_IDENT_RE: ze,
  NUMBER_RE: On,
  C_NUMBER_RE: Rn,
  BINARY_NUMBER_RE: An,
  RE_STARTERS_RE: wt,
  SHEBANG: Ot,
  BACKSLASH_ESCAPE: ge,
  APOS_STRING_MODE: Rt,
  QUOTE_STRING_MODE: At,
  PHRASAL_WORDS_MODE: vt,
  COMMENT: ve,
  C_LINE_COMMENT_MODE: Mt,
  C_BLOCK_COMMENT_MODE: It,
  HASH_COMMENT_MODE: Ct,
  NUMBER_MODE: kt,
  C_NUMBER_MODE: xt,
  BINARY_NUMBER_MODE: Dt,
  REGEXP_MODE: Lt,
  TITLE_MODE: Bt,
  UNDERSCORE_TITLE_MODE: Ut,
  METHOD_GUARD: Pt,
  END_SAME_AS_BEGIN: Ft,
});
function $t(e, n) {
  e.input[e.index - 1] === '.' && n.ignoreMatch();
}
function zt(e, n) {
  e.className !== void 0 && ((e.scope = e.className), delete e.className);
}
function Kt(e, n) {
  n &&
    e.beginKeywords &&
    ((e.begin = '\\b(' + e.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)'),
    (e.__beforeBegin = $t),
    (e.keywords = e.keywords || e.beginKeywords),
    delete e.beginKeywords,
    e.relevance === void 0 && (e.relevance = 0));
}
function Gt(e, n) {
  Array.isArray(e.illegal) && (e.illegal = Fe(...e.illegal));
}
function Ht(e, n) {
  if (e.match) {
    if (e.begin || e.end) throw new Error('begin & end are not supported with match');
    (e.begin = e.match), delete e.match;
  }
}
function qt(e, n) {
  e.relevance === void 0 && (e.relevance = 1);
}
const Wt = (e, n) => {
    if (!e.beforeMatch) return;
    if (e.starts) throw new Error('beforeMatch cannot be used with starts');
    const t = Object.assign({}, e);
    Object.keys(e).forEach((a) => {
      delete e[a];
    }),
      (e.keywords = t.keywords),
      (e.begin = se(t.beforeMatch, Sn(t.begin))),
      (e.starts = { relevance: 0, contains: [Object.assign(t, { endsParent: !0 })] }),
      (e.relevance = 0),
      delete t.beforeMatch;
  },
  Yt = ['of', 'and', 'for', 'in', 'not', 'or', 'if', 'then', 'parent', 'list', 'value'],
  Zt = 'keyword';
function vn(e, n, t = Zt) {
  const a = Object.create(null);
  return (
    typeof e == 'string'
      ? s(t, e.split(' '))
      : Array.isArray(e)
      ? s(t, e)
      : Object.keys(e).forEach(function (u) {
          Object.assign(a, vn(e[u], n, u));
        }),
    a
  );
  function s(u, r) {
    n && (r = r.map((i) => i.toLowerCase())),
      r.forEach(function (i) {
        const o = i.split('|');
        a[o[0]] = [u, Vt(o[0], o[1])];
      });
  }
}
function Vt(e, n) {
  return n ? Number(n) : Xt(e) ? 0 : 1;
}
function Xt(e) {
  return Yt.includes(e.toLowerCase());
}
const Je = {},
  re = (e) => {
    console.error(e);
  },
  je = (e, ...n) => {
    console.log(`WARN: ${e}`, ...n);
  },
  oe = (e, n) => {
    Je[`${e}/${n}`] || (console.log(`Deprecated as of ${e}. ${n}`), (Je[`${e}/${n}`] = !0));
  },
  Ae = new Error();
function Mn(e, n, { key: t }) {
  let a = 0;
  const s = e[t],
    u = {},
    r = {};
  for (let i = 1; i <= n.length; i++) (r[i + a] = s[i]), (u[i + a] = !0), (a += Tn(n[i - 1]));
  (e[t] = r), (e[t]._emit = u), (e[t]._multi = !0);
}
function Qt(e) {
  if (Array.isArray(e.begin)) {
    if (e.skip || e.excludeBegin || e.returnBegin)
      throw (re('skip, excludeBegin, returnBegin not compatible with beginScope: {}'), Ae);
    if (typeof e.beginScope != 'object' || e.beginScope === null)
      throw (re('beginScope must be object'), Ae);
    Mn(e, e.begin, { key: 'beginScope' }), (e.begin = $e(e.begin, { joinWith: '' }));
  }
}
function Jt(e) {
  if (Array.isArray(e.end)) {
    if (e.skip || e.excludeEnd || e.returnEnd)
      throw (re('skip, excludeEnd, returnEnd not compatible with endScope: {}'), Ae);
    if (typeof e.endScope != 'object' || e.endScope === null)
      throw (re('endScope must be object'), Ae);
    Mn(e, e.end, { key: 'endScope' }), (e.end = $e(e.end, { joinWith: '' }));
  }
}
function jt(e) {
  e.scope &&
    typeof e.scope == 'object' &&
    e.scope !== null &&
    ((e.beginScope = e.scope), delete e.scope);
}
function ea(e) {
  jt(e),
    typeof e.beginScope == 'string' && (e.beginScope = { _wrap: e.beginScope }),
    typeof e.endScope == 'string' && (e.endScope = { _wrap: e.endScope }),
    Qt(e),
    Jt(e);
}
function na(e) {
  function n(r, i) {
    return new RegExp(
      ue(r),
      'm' + (e.case_insensitive ? 'i' : '') + (e.unicodeRegex ? 'u' : '') + (i ? 'g' : ''),
    );
  }
  class t {
    constructor() {
      (this.matchIndexes = {}), (this.regexes = []), (this.matchAt = 1), (this.position = 0);
    }
    addRule(i, o) {
      (o.position = this.position++),
        (this.matchIndexes[this.matchAt] = o),
        this.regexes.push([o, i]),
        (this.matchAt += Tn(i) + 1);
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const i = this.regexes.map((o) => o[1]);
      (this.matcherRe = n($e(i, { joinWith: '|' }), !0)), (this.lastIndex = 0);
    }
    exec(i) {
      this.matcherRe.lastIndex = this.lastIndex;
      const o = this.matcherRe.exec(i);
      if (!o) return null;
      const c = o.findIndex((_, b) => b > 0 && _ !== void 0),
        l = this.matchIndexes[c];
      return o.splice(0, c), Object.assign(o, l);
    }
  }
  class a {
    constructor() {
      (this.rules = []),
        (this.multiRegexes = []),
        (this.count = 0),
        (this.lastIndex = 0),
        (this.regexIndex = 0);
    }
    getMatcher(i) {
      if (this.multiRegexes[i]) return this.multiRegexes[i];
      const o = new t();
      return (
        this.rules.slice(i).forEach(([c, l]) => o.addRule(c, l)),
        o.compile(),
        (this.multiRegexes[i] = o),
        o
      );
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    addRule(i, o) {
      this.rules.push([i, o]), o.type === 'begin' && this.count++;
    }
    exec(i) {
      const o = this.getMatcher(this.regexIndex);
      o.lastIndex = this.lastIndex;
      let c = o.exec(i);
      if (this.resumingScanAtSamePosition() && !(c && c.index === this.lastIndex)) {
        const l = this.getMatcher(0);
        (l.lastIndex = this.lastIndex + 1), (c = l.exec(i));
      }
      return (
        c &&
          ((this.regexIndex += c.position + 1),
          this.regexIndex === this.count && this.considerAll()),
        c
      );
    }
  }
  function s(r) {
    const i = new a();
    return (
      r.contains.forEach((o) => i.addRule(o.begin, { rule: o, type: 'begin' })),
      r.terminatorEnd && i.addRule(r.terminatorEnd, { type: 'end' }),
      r.illegal && i.addRule(r.illegal, { type: 'illegal' }),
      i
    );
  }
  function u(r, i) {
    const o = r;
    if (r.isCompiled) return o;
    [zt, Ht, ea, Wt].forEach((l) => l(r, i)),
      e.compilerExtensions.forEach((l) => l(r, i)),
      (r.__beforeBegin = null),
      [Kt, Gt, qt].forEach((l) => l(r, i)),
      (r.isCompiled = !0);
    let c = null;
    return (
      typeof r.keywords == 'object' &&
        r.keywords.$pattern &&
        ((r.keywords = Object.assign({}, r.keywords)),
        (c = r.keywords.$pattern),
        delete r.keywords.$pattern),
      (c = c || /\w+/),
      r.keywords && (r.keywords = vn(r.keywords, e.case_insensitive)),
      (o.keywordPatternRe = n(c, !0)),
      i &&
        (r.begin || (r.begin = /\B|\b/),
        (o.beginRe = n(o.begin)),
        !r.end && !r.endsWithParent && (r.end = /\B|\b/),
        r.end && (o.endRe = n(o.end)),
        (o.terminatorEnd = ue(o.end) || ''),
        r.endsWithParent &&
          i.terminatorEnd &&
          (o.terminatorEnd += (r.end ? '|' : '') + i.terminatorEnd)),
      r.illegal && (o.illegalRe = n(r.illegal)),
      r.contains || (r.contains = []),
      (r.contains = [].concat(
        ...r.contains.map(function (l) {
          return ta(l === 'self' ? r : l);
        }),
      )),
      r.contains.forEach(function (l) {
        u(l, o);
      }),
      r.starts && u(r.starts, i),
      (o.matcher = s(o)),
      o
    );
  }
  if (
    (e.compilerExtensions || (e.compilerExtensions = []), e.contains && e.contains.includes('self'))
  )
    throw new Error(
      'ERR: contains `self` is not supported at the top-level of a language.  See documentation.',
    );
  return (e.classNameAliases = te(e.classNameAliases || {})), u(e);
}
function In(e) {
  return e ? e.endsWithParent || In(e.starts) : !1;
}
function ta(e) {
  return (
    e.variants &&
      !e.cachedVariants &&
      (e.cachedVariants = e.variants.map(function (n) {
        return te(e, { variants: null }, n);
      })),
    e.cachedVariants
      ? e.cachedVariants
      : In(e)
      ? te(e, { starts: e.starts ? te(e.starts) : null })
      : Object.isFrozen(e)
      ? te(e)
      : e
  );
}
var aa = '11.8.0';
class ia extends Error {
  constructor(n, t) {
    super(n), (this.name = 'HTMLInjectionError'), (this.html = t);
  }
}
const Be = yn,
  en = te,
  nn = Symbol('nomatch'),
  ra = 7,
  Cn = function (e) {
    const n = Object.create(null),
      t = Object.create(null),
      a = [];
    let s = !0;
    const u = "Could not find the language '{}', did you forget to load/include a language module?",
      r = { disableAutodetect: !0, name: 'Plain text', contains: [] };
    let i = {
      ignoreUnescapedHTML: !1,
      throwUnescapedHTML: !1,
      noHighlightRe: /^(no-?highlight)$/i,
      languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
      classPrefix: 'hljs-',
      cssSelector: 'pre code',
      languages: null,
      __emitter: Et,
    };
    function o(d) {
      return i.noHighlightRe.test(d);
    }
    function c(d) {
      let g = d.className + ' ';
      g += d.parentNode ? d.parentNode.className : '';
      const N = i.languageDetectRe.exec(g);
      if (N) {
        const w = U(N[1]);
        return (
          w ||
            (je(u.replace('{}', N[1])), je('Falling back to no-highlight mode for this block.', d)),
          w ? N[1] : 'no-highlight'
        );
      }
      return g.split(/\s+/).find((w) => o(w) || U(w));
    }
    function l(d, g, N) {
      let w = '',
        M = '';
      typeof g == 'object'
        ? ((w = d), (N = g.ignoreIllegals), (M = g.language))
        : (oe('10.7.0', 'highlight(lang, code, ...args) has been deprecated.'),
          oe(
            '10.7.0',
            `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`,
          ),
          (M = d),
          (w = g)),
        N === void 0 && (N = !0);
      const P = { code: w, language: M };
      G('before:highlight', P);
      const H = P.result ? P.result : _(P.language, P.code, N);
      return (H.code = P.code), G('after:highlight', H), H;
    }
    function _(d, g, N, w) {
      const M = Object.create(null);
      function P(p, E) {
        return p.keywords[E];
      }
      function H() {
        if (!T.keywords) {
          K.addText(B);
          return;
        }
        let p = 0;
        T.keywordPatternRe.lastIndex = 0;
        let E = T.keywordPatternRe.exec(B),
          O = '';
        for (; E; ) {
          O += B.substring(p, E.index);
          const I = Q.case_insensitive ? E[0].toLowerCase() : E[0],
            q = P(T, I);
          if (q) {
            const [ee, Dn] = q;
            if (
              (K.addText(O),
              (O = ''),
              (M[I] = (M[I] || 0) + 1),
              M[I] <= ra && (fe += Dn),
              ee.startsWith('_'))
            )
              O += E[0];
            else {
              const Ln = Q.classNameAliases[ee] || ee;
              V(E[0], Ln);
            }
          } else O += E[0];
          (p = T.keywordPatternRe.lastIndex), (E = T.keywordPatternRe.exec(B));
        }
        (O += B.substring(p)), K.addText(O);
      }
      function ae() {
        if (B === '') return;
        let p = null;
        if (typeof T.subLanguage == 'string') {
          if (!n[T.subLanguage]) {
            K.addText(B);
            return;
          }
          (p = _(T.subLanguage, B, !0, Ge[T.subLanguage])), (Ge[T.subLanguage] = p._top);
        } else p = m(B, T.subLanguage.length ? T.subLanguage : null);
        T.relevance > 0 && (fe += p.relevance), K.__addSublanguage(p._emitter, p.language);
      }
      function W() {
        T.subLanguage != null ? ae() : H(), (B = '');
      }
      function V(p, E) {
        p !== '' && (K.startScope(E), K.addText(p), K.endScope());
      }
      function be(p, E) {
        let O = 1;
        const I = E.length - 1;
        for (; O <= I; ) {
          if (!p._emit[O]) {
            O++;
            continue;
          }
          const q = Q.classNameAliases[p[O]] || p[O],
            ee = E[O];
          q ? V(ee, q) : ((B = ee), H(), (B = '')), O++;
        }
      }
      function pe(p, E) {
        return (
          p.scope &&
            typeof p.scope == 'string' &&
            K.openNode(Q.classNameAliases[p.scope] || p.scope),
          p.beginScope &&
            (p.beginScope._wrap
              ? (V(B, Q.classNameAliases[p.beginScope._wrap] || p.beginScope._wrap), (B = ''))
              : p.beginScope._multi && (be(p.beginScope, E), (B = ''))),
          (T = Object.create(p, { parent: { value: T } })),
          T
        );
      }
      function D(p, E, O) {
        let I = yt(p.endRe, O);
        if (I) {
          if (p['on:end']) {
            const q = new Ve(p);
            p['on:end'](E, q), q.isMatchIgnored && (I = !1);
          }
          if (I) {
            for (; p.endsParent && p.parent; ) p = p.parent;
            return p;
          }
        }
        if (p.endsWithParent) return D(p.parent, E, O);
      }
      function _e(p) {
        return T.matcher.regexIndex === 0 ? ((B += p[0]), 1) : ((ke = !0), 0);
      }
      function me(p) {
        const E = p[0],
          O = p.rule,
          I = new Ve(O),
          q = [O.__beforeBegin, O['on:begin']];
        for (const ee of q) if (ee && (ee(p, I), I.isMatchIgnored)) return _e(E);
        return (
          O.skip
            ? (B += E)
            : (O.excludeBegin && (B += E), W(), !O.returnBegin && !O.excludeBegin && (B = E)),
          pe(O, p),
          O.returnBegin ? 0 : E.length
        );
      }
      function Me(p) {
        const E = p[0],
          O = g.substring(p.index),
          I = D(T, p, O);
        if (!I) return nn;
        const q = T;
        T.endScope && T.endScope._wrap
          ? (W(), V(E, T.endScope._wrap))
          : T.endScope && T.endScope._multi
          ? (W(), be(T.endScope, p))
          : q.skip
          ? (B += E)
          : (q.returnEnd || q.excludeEnd || (B += E), W(), q.excludeEnd && (B = E));
        do
          T.scope && K.closeNode(),
            !T.skip && !T.subLanguage && (fe += T.relevance),
            (T = T.parent);
        while (T !== I.parent);
        return I.starts && pe(I.starts, p), q.returnEnd ? 0 : E.length;
      }
      function kn() {
        const p = [];
        for (let E = T; E !== Q; E = E.parent) E.scope && p.unshift(E.scope);
        p.forEach((E) => K.openNode(E));
      }
      let Ee = {};
      function Ke(p, E) {
        const O = E && E[0];
        if (((B += p), O == null)) return W(), 0;
        if (Ee.type === 'begin' && E.type === 'end' && Ee.index === E.index && O === '') {
          if (((B += g.slice(E.index, E.index + 1)), !s)) {
            const I = new Error(`0 width match regex (${d})`);
            throw ((I.languageName = d), (I.badRule = Ee.rule), I);
          }
          return 1;
        }
        if (((Ee = E), E.type === 'begin')) return me(E);
        if (E.type === 'illegal' && !N) {
          const I = new Error(
            'Illegal lexeme "' + O + '" for mode "' + (T.scope || '<unnamed>') + '"',
          );
          throw ((I.mode = T), I);
        } else if (E.type === 'end') {
          const I = Me(E);
          if (I !== nn) return I;
        }
        if (E.type === 'illegal' && O === '') return 1;
        if (Ce > 1e5 && Ce > E.index * 3)
          throw new Error('potential infinite loop, way more iterations than matches');
        return (B += O), O.length;
      }
      const Q = U(d);
      if (!Q) throw (re(u.replace('{}', d)), new Error('Unknown language: "' + d + '"'));
      const xn = na(Q);
      let Ie = '',
        T = w || xn;
      const Ge = {},
        K = new i.__emitter(i);
      kn();
      let B = '',
        fe = 0,
        ie = 0,
        Ce = 0,
        ke = !1;
      try {
        if (Q.__emitTokens) Q.__emitTokens(g, K);
        else {
          for (T.matcher.considerAll(); ; ) {
            Ce++, ke ? (ke = !1) : T.matcher.considerAll(), (T.matcher.lastIndex = ie);
            const p = T.matcher.exec(g);
            if (!p) break;
            const E = g.substring(ie, p.index),
              O = Ke(E, p);
            ie = p.index + O;
          }
          Ke(g.substring(ie));
        }
        return (
          K.finalize(),
          (Ie = K.toHTML()),
          { language: d, value: Ie, relevance: fe, illegal: !1, _emitter: K, _top: T }
        );
      } catch (p) {
        if (p.message && p.message.includes('Illegal'))
          return {
            language: d,
            value: Be(g),
            illegal: !0,
            relevance: 0,
            _illegalBy: {
              message: p.message,
              index: ie,
              context: g.slice(ie - 100, ie + 100),
              mode: p.mode,
              resultSoFar: Ie,
            },
            _emitter: K,
          };
        if (s)
          return {
            language: d,
            value: Be(g),
            illegal: !1,
            relevance: 0,
            errorRaised: p,
            _emitter: K,
            _top: T,
          };
        throw p;
      }
    }
    function b(d) {
      const g = { value: Be(d), illegal: !1, relevance: 0, _top: r, _emitter: new i.__emitter(i) };
      return g._emitter.addText(d), g;
    }
    function m(d, g) {
      g = g || i.languages || Object.keys(n);
      const N = b(d),
        w = g
          .filter(U)
          .filter(X)
          .map((W) => _(W, d, !1));
      w.unshift(N);
      const M = w.sort((W, V) => {
          if (W.relevance !== V.relevance) return V.relevance - W.relevance;
          if (W.language && V.language) {
            if (U(W.language).supersetOf === V.language) return 1;
            if (U(V.language).supersetOf === W.language) return -1;
          }
          return 0;
        }),
        [P, H] = M,
        ae = P;
      return (ae.secondBest = H), ae;
    }
    function h(d, g, N) {
      const w = (g && t[g]) || N;
      d.classList.add('hljs'), d.classList.add(`language-${w}`);
    }
    function y(d) {
      let g = null;
      const N = c(d);
      if (o(N)) return;
      if (
        (G('before:highlightElement', { el: d, language: N }),
        d.children.length > 0 &&
          (i.ignoreUnescapedHTML ||
            (console.warn(
              'One of your code blocks includes unescaped HTML. This is a potentially serious security risk.',
            ),
            console.warn('https://github.com/highlightjs/highlight.js/wiki/security'),
            console.warn('The element with unescaped HTML:'),
            console.warn(d)),
          i.throwUnescapedHTML))
      )
        throw new ia('One of your code blocks includes unescaped HTML.', d.innerHTML);
      g = d;
      const w = g.textContent,
        M = N ? l(w, { language: N, ignoreIllegals: !0 }) : m(w);
      (d.innerHTML = M.value),
        h(d, N, M.language),
        (d.result = { language: M.language, re: M.relevance, relevance: M.relevance }),
        M.secondBest &&
          (d.secondBest = { language: M.secondBest.language, relevance: M.secondBest.relevance }),
        G('after:highlightElement', { el: d, result: M, text: w });
    }
    function f(d) {
      i = en(i, d);
    }
    const A = () => {
      S(), oe('10.6.0', 'initHighlighting() deprecated.  Use highlightAll() now.');
    };
    function k() {
      S(), oe('10.6.0', 'initHighlightingOnLoad() deprecated.  Use highlightAll() now.');
    }
    let R = !1;
    function S() {
      if (document.readyState === 'loading') {
        R = !0;
        return;
      }
      document.querySelectorAll(i.cssSelector).forEach(y);
    }
    function x() {
      R && S();
    }
    typeof window < 'u' &&
      window.addEventListener &&
      window.addEventListener('DOMContentLoaded', x, !1);
    function v(d, g) {
      let N = null;
      try {
        N = g(e);
      } catch (w) {
        if ((re("Language definition for '{}' could not be registered.".replace('{}', d)), s))
          re(w);
        else throw w;
        N = r;
      }
      N.name || (N.name = d),
        (n[d] = N),
        (N.rawDefinition = g.bind(null, e)),
        N.aliases && Y(N.aliases, { languageName: d });
    }
    function C(d) {
      delete n[d];
      for (const g of Object.keys(t)) t[g] === d && delete t[g];
    }
    function F() {
      return Object.keys(n);
    }
    function U(d) {
      return (d = (d || '').toLowerCase()), n[d] || n[t[d]];
    }
    function Y(d, { languageName: g }) {
      typeof d == 'string' && (d = [d]),
        d.forEach((N) => {
          t[N.toLowerCase()] = g;
        });
    }
    function X(d) {
      const g = U(d);
      return g && !g.disableAutodetect;
    }
    function J(d) {
      d['before:highlightBlock'] &&
        !d['before:highlightElement'] &&
        (d['before:highlightElement'] = (g) => {
          d['before:highlightBlock'](Object.assign({ block: g.el }, g));
        }),
        d['after:highlightBlock'] &&
          !d['after:highlightElement'] &&
          (d['after:highlightElement'] = (g) => {
            d['after:highlightBlock'](Object.assign({ block: g.el }, g));
          });
    }
    function z(d) {
      J(d), a.push(d);
    }
    function $(d) {
      const g = a.indexOf(d);
      g !== -1 && a.splice(g, 1);
    }
    function G(d, g) {
      const N = d;
      a.forEach(function (w) {
        w[N] && w[N](g);
      });
    }
    function j(d) {
      return (
        oe('10.7.0', 'highlightBlock will be removed entirely in v12.0'),
        oe('10.7.0', 'Please use highlightElement now.'),
        y(d)
      );
    }
    Object.assign(e, {
      highlight: l,
      highlightAuto: m,
      highlightAll: S,
      highlightElement: y,
      highlightBlock: j,
      configure: f,
      initHighlighting: A,
      initHighlightingOnLoad: k,
      registerLanguage: v,
      unregisterLanguage: C,
      listLanguages: F,
      getLanguage: U,
      registerAliases: Y,
      autoDetection: X,
      inherit: en,
      addPlugin: z,
      removePlugin: $,
    }),
      (e.debugMode = function () {
        s = !1;
      }),
      (e.safeMode = function () {
        s = !0;
      }),
      (e.versionString = aa),
      (e.regex = { concat: se, lookahead: Sn, either: Fe, optional: Nt, anyNumberOfTimes: ft });
    for (const d in we) typeof we[d] == 'object' && hn(we[d]);
    return Object.assign(e, we), e;
  },
  de = Cn({});
de.newInstance = () => Cn({});
var sa = de;
de.HighlightJS = de;
de.default = de;
const qa = Bn(sa);
export {
  ka as A,
  xa as B,
  Da as C,
  La as D,
  Ba as E,
  Ua as F,
  Pa as G,
  qa as H,
  Fa as I,
  $a as J,
  za as K,
  Ka as L,
  Ga as M,
  Ha as N,
  ca as a,
  la as b,
  oa as c,
  da as d,
  ua as e,
  ga as f,
  Bn as g,
  ba as h,
  pa as i,
  _a as j,
  ma as k,
  Ea as l,
  fa as m,
  Na as n,
  ha as o,
  ya as p,
  Sa as q,
  Ta as r,
  wa as s,
  Oa as t,
  Ra as u,
  Aa as v,
  va as w,
  Ma as x,
  Ia as y,
  Ca as z,
};
